{"version":3,"sources":["utils/logger.ts","types.ts","services/users.ts","services/games.ts","reducers/games.reducer.ts","reducers/user.reducer.ts","reducers/channels.reducer.ts","reducers/alert.reducer.ts","reducers/index.ts","store/index.ts","components/LoginForm.tsx","components/TempFrontPage.tsx","components/UserControls.tsx","services/words.ts","components/host/RenderForm.tsx","components/host/NewGame.tsx","services/socketio/events.ts","services/socketio/callbacks.ts","services/socketio/service.ts","services/socketio/actions.ts","components/JitsiFrame.tsx","components/sanakierto/WaitingRoom.tsx","components/sanakierto/ScoreBoard.tsx","hooks/useInterval.ts","components/sanakierto/HostPanel.tsx","components/sanakierto/Results.tsx","components/Loader.tsx","components/sanakierto/SanakiertoHostView.tsx","components/sanakierto/Scores.tsx","components/sanakierto/PlayerSidePanel.tsx","components/sanakierto/SanakiertoPlayerView.tsx","components/host/QueuedGame.tsx","components/host/Dashboard.tsx","components/ChannelPage.tsx","App.tsx","index.tsx"],"names":["log","msg","process","GameType","GameStatus","ActionType","PlayerEvent","HostEvent","CommonEvent","token","login","username","password","a","credentials","axios","post","response","data","getAll","get","setToken","userToken","getAuthHeader","Error","getToken","config","headers","Authorization","userService","addNew","gameToAdd","deleteGame","id","delete","initialState","allGames","activeGame","loading","activate","game","type","SANAKIERTO","status","WAITING","info","turn","round","initSuccess","games","INIT_GAMES_SUCCESS","payload","setActiveGame","SET_ACTIVE_GAME","reducer","state","action","SET_GAMES","INIT_GAMES_REQUEST","INIT_GAMES_FAILURE","ADD_GAME_REQUEST","ADD_GAME_SUCCESS","concat","ADD_GAME_FAILURE","DELETE_GAME_REQUEST","DELETE_GAME_SUCCESS","filter","DELETE_GAME_FAILURE","gameToActivate","find","activatedGame","map","initialUser","loggedIn","socket","jitsiRoom","displayName","loggingIn","loginSuccess","user","LOGIN_SUCCESS","setJitsiRoom","roomName","SET_JITSI_ROOM","setSocket","SET_SOCKET","LOGIN_REQUEST","jitsiToken","LOGIN_FAILURE","LOGOUT","SET_JITSI_TOKEN","SET_DISPLAYNAME","allChannels","channels","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_REQUEST","INIT_CHANNELS_FAILURE","setError","alert","SET_ERROR","CLEAR_ERROR","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","useStyles","makeStyles","theme","createStyles","container","padding","spacing","textAlign","formField","marginTop","LoginForm","classes","dispatch","useDispatch","React","useState","setUsername","setPassword","useSelector","shallowEqual","to","className","TextField","label","variant","value","onChange","target","Fab","onClick","loggedUser","window","localStorage","setItem","JSON","stringify","loginUser","CircularProgress","linkContainer","FrontPage","Typography","UserControls","history","useHistory","Button","color","removeItem","push","location","pathname","getOne","Array","isArray","length","getMany","amount","formRow","alignItems","marginRight","gameInfo","display","marginBottom","wordCell","minWidth","buttonRow","PlayerTable","players","handleRefresh","Table","TableHead","TableRow","TableCell","TableBody","player","index","key","component","name","words","word","style","IconButton","size","RenderForm","formikProps","handleReturn","playerToUpdate","wordIndex","wordService","randomWord","newPlayers","values","newWords","setValues","FormGroup","row","htmlFor","KeyboardDateTimePicker","autoOk","ampm","format","disablePast","startTime","setFieldValue","render","arrayHelpers","initializePlayers","playerCount","wordsPerPlayer","randomWords","i","j","pop","shortid","generate","points","online","NewGame","gameType","setGameType","setPlayers","useEffect","init","initialPlayers","error","console","goBack","gutterBottom","Divider","utils","DateFnsUtils","locale","fiLocale","initialValues","Date","UPCOMING","rounds","hostOnline","onSubmit","actions","gameService","addedGame","disabled","joinGame","event","JOIN_GAME","createSuccess","CREATE_SUCCESS","endSuccess","gameId","END_SUCCESS","getState","newGames","FINISHED","joinSuccess","JOIN_SUCCESS","gameReady","GAME_READY","socketService","emit","events","message","getTokenForSocket","hostName","playerId","authenticateSocket","callback","on","CONNECT","AUTH_REQUEST","AUTHENTICATED","UNAUTHORIZED","callbacks","attachListeners","isHost","GAME_UPDATED","CREATE_FAILURE","START_SUCCESS","startedGame","START_FAILURE","UPDATE_SUCCESS","UPDATE_FAILURE","END_FAILURE","JOIN_FAILURE","GAME_STARTING","GAME_ENDED","eventObj","emitJitsiReady","JITSI_READY","startGame","START_GAME","updateGame","UPDATE_GAME","endGame","END_GAME","getAuthCallback","CREATE_ROOM","tearDownSocket","disconnect","initPlayerSocket","socketIO","loader","height","flexDirection","justifyContent","btnContainer","Loader","JitsiFrame","loadedCallback","dev","showJitsi","setShowJitsi","jitsi","setJitsi","dispose","handleAPIloaded","api","handleLeave","containerStyle","width","undefined","domain","jwt","loadingComponent","onAPILoad","JitsiMeetApi","subject","interfaceConfig","DEFAULT_REMOTE_DISPLAY_NAME","DISABLE_DOMINANT_SPEAKER_INDICATOR","DISABLE_FOCUS_INDICATOR","DISABLE_JOIN_LEAVE_NOTIFICATIONS","DISABLE_PRESENCE_STATUS","DISABLE_RINGING","DISABLE_TRANSCRIPTION_SUBTITLES","DISPLAY_WELCOME_PAGE_CONTENT","DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT","ENABLE_DIAL_OUT","filmStripOnly","GENERATE_ROOMNAMES_ON_WELCOME_PAGE","HIDE_INVITE_MORE_HEADER","SHOW_JITSI_WATERMARK","SHOW_WATERMARK_FOR_GUESTS","RECENT_LIST_ENABLED","startBtn","margin","WaitingRoom","handleStart","p","noPaddingX","paddingLeft","paddingRight","saveBtnContainer","additionBox","ScoreBoard","handleUpdate","fill","checkBoxes","setCheckboxes","getPointAddition","playerIndex","correctAnswers","reduce","sum","next","align","noWrap","addition","valueString","additionElement","Checkbox","checked","newValues","useInterval","delay","savedCallback","useRef","current","setInterval","clearInterval","flex","grow","flexGrow","HostPanel","timerRunning","setTimerRunning","timer","setTimer","playerInTurnIndex","findIndex","playerWithTurn","join","indexOf","newGameState","Results","results","handleTearDown","savedResults","centered","spinner","jitsiContainer","boxSizing","backgroundColor","palette","grey","hostControls","marginLeft","SanakiertoHostView","gameID","useParams","Paper","elevation","RUNNING","sort","b","sideBar","Scores","PlayerSidePanel","sidePanel","sortPlayersByPoints","SanakiertoPlayerView","infoBar","editButton","playerRow","inviteText","QueuedGame","anchorEl","setAnchorEl","setInviteText","showInviteText","capitalize","getInviteUrl","getInviteText","Link","startButton","currentTarget","Menu","open","Boolean","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","idToRemove","confirm","whiteSpace","Dashboard","filterGamesByStatus","filtered","ChannelPage","labelText","path","navbar","toolbar","App","getItem","parsedUser","parse","AppBar","position","Toolbar","Container","channel","channelName","channelRoutes","TempFrontPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1c63e577.chunk.js","sourcesContent":["export const log = (msg: unknown): void => {\n  // eslint-disable-next-line no-undef\n  if (process && process.env && process.env.NODE_ENV === 'development')\n    console.log(msg);\n};\n","// JITSI\r\n\r\nexport interface JitsiApi {\r\n  on: (event: string, listener: () => void) => void;\r\n  dispose: () => void;\r\n}\r\n\r\n// GAMES\r\n\r\nexport enum GameType {\r\n  SANAKIERTO = 'sanakierto',\r\n}\r\n\r\nexport interface Game {\r\n  id: string;\r\n  type: GameType;\r\n  startTime: Date;\r\n  status: GameStatus;\r\n  hostOnline: boolean;\r\n}\r\n\r\nexport interface SanakiertoPlayer {\r\n  id: string;\r\n  name: string;\r\n  words: string[];\r\n  points: number;\r\n  online: boolean;\r\n}\r\n\r\nexport interface Sanakierto extends Game {\r\n  players: SanakiertoPlayer[];\r\n  rounds: number;\r\n}\r\n\r\nexport interface SanakiertoActive extends Sanakierto {\r\n  info: {\r\n    turn: string; // player id\r\n    round: number;\r\n  };\r\n}\r\n\r\nexport type SelectableGame = Sanakierto; // additional games here\r\n\r\nexport type ActiveGame = SanakiertoActive; // additional games here\r\n\r\nexport enum GameStatus {\r\n  RUNNING = 'Running',\r\n  WAITING = 'Waiting for players',\r\n  UPCOMING = 'Upcoming',\r\n  FINISHED = 'Finished',\r\n}\r\n\r\n// USERS & AUTH\r\n\r\nexport interface BaseUser {\r\n  loggedIn: false;\r\n  socket: null | SocketIOClient.Socket;\r\n  jitsiRoom: null | string;\r\n  displayName: null | string;\r\n  loggingIn: boolean;\r\n}\r\n\r\nexport interface LoggedUser {\r\n  username: string;\r\n  loggedIn: true;\r\n  token: string;\r\n  jitsiToken: string | null;\r\n  socket: null | SocketIOClient.Socket;\r\n  jitsiRoom: null | string;\r\n  loggingIn: boolean;\r\n}\r\n\r\nexport interface LoggingUser extends Omit<BaseUser, 'loggingIn'> {\r\n  loggingIn: true;\r\n}\r\n\r\nexport interface HostChannel {\r\n  username: string;\r\n  channelName: string;\r\n}\r\n\r\n// REDUX\r\n\r\nexport interface State {\r\n  games: GamesState;\r\n  user: User;\r\n  channels: ChannelsState;\r\n  alert: AlertState;\r\n}\r\n\r\nexport type AlertState = string | null;\r\n\r\nexport interface GamesState {\r\n  allGames: SelectableGame[];\r\n  activeGame: ActiveGame | null;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface ChannelsState {\r\n  allChannels: HostChannel[];\r\n  loading: boolean;\r\n}\r\n\r\nexport type User = LoggedUser | LoggingUser | BaseUser;\r\n\r\nexport enum ActionType {\r\n  // GAME ACTIONS\r\n\r\n  SET_ACTIVE_GAME = 'SET_ACTIVE_GAME',\r\n  SET_GAMES = 'SET_GAMES',\r\n\r\n  // init games\r\n  INIT_GAMES_REQUEST = 'INIT_GAMES_REQUEST',\r\n  INIT_GAMES_SUCCESS = 'INIT_GAMES_SUCCESS',\r\n  INIT_GAMES_FAILURE = 'INIT_GAMES_FAILURE',\r\n\r\n  // add game\r\n  ADD_GAME_REQUEST = 'ADD_GAME_REQUEST',\r\n  ADD_GAME_SUCCESS = 'ADD_GAME_SUCCESS',\r\n  ADD_GAME_FAILURE = 'ADD_GAME_FAILURE',\r\n\r\n  // delete game\r\n  DELETE_GAME_REQUEST = 'DELETE_GAME_REQUEST',\r\n  DELETE_GAME_SUCCESS = 'DELETE_GAME_SUCCESS',\r\n  DELETE_GAME_FAILURE = 'DELETE_GAME_FAILURE',\r\n\r\n  LAUNCH_GAME = 'LAUNCH_GAME',\r\n  UPDATE_ACTIVE_GAME = 'UPDATE_ACTIVE_GAME',\r\n\r\n  // USER ACTIONS\r\n\r\n  // login & logout\r\n  LOGIN_REQUEST = 'LOGIN_REQUEST',\r\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\r\n  LOGIN_FAILURE = 'LOGIN_FAILURE',\r\n  LOGOUT = 'LOGOUT',\r\n\r\n  // user handling\r\n  SET_JITSI_TOKEN = 'SET_JITSI_TOKEN',\r\n  SET_JITSI_ROOM = 'SET_JITSI_ROOM',\r\n  SET_SOCKET = 'SET_SOCKET',\r\n  SET_DISPLAYNAME = 'SET_DISPLAYNAME',\r\n\r\n  // init channels\r\n  INIT_CHANNELS_REQUEST = 'INIT_CHANNELS_REQUEST',\r\n  INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS',\r\n  INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE',\r\n\r\n  // ALERT ACTIONS\r\n\r\n  SET_ERROR = 'SET_ERROR',\r\n  CLEAR_ERROR = 'CLEAR_ERROR',\r\n}\r\n\r\nexport type Action =\r\n  | {\r\n      type: ActionType.SET_GAMES;\r\n      payload: SelectableGame[];\r\n    }\r\n  | {\r\n      type: ActionType.SET_ACTIVE_GAME;\r\n      payload: ActiveGame | null;\r\n    }\r\n  // INIT GAMES\r\n  | {\r\n      type: ActionType.INIT_GAMES_REQUEST;\r\n    }\r\n  | {\r\n      type: ActionType.INIT_GAMES_SUCCESS;\r\n      payload: SelectableGame[];\r\n    }\r\n  | {\r\n      type: ActionType.INIT_GAMES_FAILURE;\r\n    }\r\n\r\n  // ADD GAME\r\n  | {\r\n      type: ActionType.ADD_GAME_REQUEST;\r\n    }\r\n  | {\r\n      type: ActionType.ADD_GAME_SUCCESS;\r\n      payload: SelectableGame;\r\n    }\r\n  | {\r\n      type: ActionType.ADD_GAME_FAILURE;\r\n    }\r\n\r\n  // DELETE GAME\r\n  | {\r\n      type: ActionType.DELETE_GAME_REQUEST;\r\n    }\r\n  | {\r\n      type: ActionType.DELETE_GAME_SUCCESS;\r\n      payload: string; // game id\r\n    }\r\n  | {\r\n      type: ActionType.DELETE_GAME_FAILURE;\r\n    }\r\n\r\n  // LAUNCH GAME\r\n  | {\r\n      type: ActionType.LAUNCH_GAME;\r\n      payload: string; // game id\r\n    }\r\n  | {\r\n      type: ActionType.UPDATE_ACTIVE_GAME;\r\n      payload: ActiveGame; // game id\r\n    }\r\n\r\n  // INIT CHANNELS\r\n  | {\r\n      type: ActionType.INIT_CHANNELS_REQUEST;\r\n    }\r\n  | {\r\n      type: ActionType.INIT_CHANNELS_SUCCESS;\r\n      payload: HostChannel[];\r\n    }\r\n  | {\r\n      type: ActionType.INIT_CHANNELS_FAILURE;\r\n    }\r\n\r\n  // LOGIN & USER\r\n  | {\r\n      type: ActionType.LOGIN_REQUEST;\r\n    }\r\n  | {\r\n      type: ActionType.LOGIN_SUCCESS;\r\n      payload: Pick<LoggedUser, 'username' | 'token'>;\r\n    }\r\n  | {\r\n      type: ActionType.LOGIN_FAILURE;\r\n    }\r\n  | {\r\n      type: ActionType.LOGOUT;\r\n    }\r\n  | {\r\n      type: ActionType.SET_JITSI_TOKEN;\r\n      payload: string; // jitsi token\r\n    }\r\n  | {\r\n      type: ActionType.SET_JITSI_ROOM;\r\n      payload: string; // jitsi room\r\n    }\r\n  | {\r\n      type: ActionType.SET_SOCKET;\r\n      payload: SocketIOClient.Socket | null;\r\n    }\r\n  | {\r\n      type: ActionType.SET_DISPLAYNAME;\r\n      payload: string;\r\n    }\r\n  // ERRORS\r\n  | {\r\n      type: ActionType.SET_ERROR;\r\n      payload: string;\r\n    }\r\n  | {\r\n      type: ActionType.CLEAR_ERROR;\r\n    };\r\n\r\n// SOCKET IO EVENTS\r\n\r\nexport interface CreateSuccessResponse {\r\n  game: ActiveGame;\r\n  jitsiToken: string;\r\n  jitsiRoom: string;\r\n}\r\n\r\nexport interface JoinSuccessResponse {\r\n  game: ActiveGame;\r\n  jitsiRoom: string;\r\n}\r\n\r\nexport enum PlayerEvent {\r\n  JOIN_GAME = 'join game',\r\n\r\n  JOIN_SUCCESS = 'join success',\r\n  JOIN_FAILURE = 'join failure',\r\n\r\n  GAME_READY = 'game ready',\r\n  GAME_STARTING = 'game starting',\r\n  GAME_UPDATED = 'game updated',\r\n  GAME_ENDED = 'game ended',\r\n}\r\n\r\nexport enum HostEvent {\r\n  JITSI_READY = 'jitsi ready',\r\n  CREATE_ROOM = 'create room',\r\n  START_GAME = 'start game',\r\n  UPDATE_GAME = 'update game',\r\n  END_GAME = 'end game',\r\n\r\n  CREATE_SUCCESS = 'create success',\r\n  CREATE_FAILURE = 'create failure',\r\n\r\n  START_SUCCESS = 'start success',\r\n  START_FAILURE = 'start failure',\r\n\r\n  UPDATE_SUCCESS = 'update success',\r\n  UPDATE_FAILURE = 'update failure',\r\n\r\n  END_SUCCESS = 'end success',\r\n  END_FAILURE = 'end failure',\r\n}\r\n\r\nexport enum CommonEvent {\r\n  AUTH_REQUEST = 'authenticate',\r\n  AUTHENTICATED = 'authenticated',\r\n  UNAUTHORIZED = 'unauthorized',\r\n\r\n  CONNECT = 'connect',\r\n  PLAYER_JOINED = 'player joined',\r\n}\r\n\r\nexport type EmittedEvent =\r\n  | {\r\n      event: PlayerEvent.JOIN_GAME;\r\n      data: null;\r\n    }\r\n  | {\r\n      event: HostEvent.CREATE_ROOM;\r\n      data: string; // game id\r\n    }\r\n  | {\r\n      event: HostEvent.JITSI_READY;\r\n      data: {\r\n        gameId: string;\r\n        jitsiRoom: string;\r\n      };\r\n    }\r\n  | {\r\n      event: HostEvent.START_GAME;\r\n      data: string; // game id\r\n    }\r\n  | {\r\n      event: HostEvent.UPDATE_GAME;\r\n      data: ActiveGame;\r\n    }\r\n  | {\r\n      event: HostEvent.END_GAME;\r\n      data: string; // game id\r\n    };\r\n\r\nexport interface RecievedError {\r\n  error: string;\r\n}\r\n\r\n// TESTING\r\n\r\nexport interface MockSocket {\r\n  listeners: Record<string, Function>;\r\n  emitted: Record<string, object>;\r\n  on: Function;\r\n  emit: Function;\r\n}\r\n","import axios from 'axios';\n\nimport { LoggedUser, HostChannel } from '../types';\n\nconst baseUrl = '/api/users';\nlet token: string | null = null;\n\nconst login = async (\n  username: string,\n  password: string\n): Promise<Pick<LoggedUser, 'username' | 'token'>> => {\n  const credentials = { username, password };\n\n  const response = await axios.post('/api/login', credentials);\n  return response.data;\n};\n\nconst setToken = (userToken: string | null) => {\n  token = userToken;\n};\n\nconst getToken = () => token;\n\nconst getAuthHeader = (): string => {\n  if (!token) throw new Error('Käyttäjän token puuttuu');\n\n  return `Bearer ${token}`;\n};\n\nconst getAll = async (): Promise<HostChannel[]> => {\n  const response = await axios.get(baseUrl);\n  return response.data;\n};\n\nexport default {\n  login,\n  setToken,\n  getAuthHeader,\n  getAll,\n  getToken,\n};\n","import axios from 'axios';\n\nimport userService from './users';\nimport { SelectableGame } from '../types';\n\nconst baseUrl = '/api/games';\n\nconst getAll = async (): Promise<SelectableGame[]> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.get(baseUrl, config);\n\n  return response.data;\n};\n\nconst addNew = async (\n  gameToAdd: Omit<SelectableGame, 'id'>\n): Promise<SelectableGame> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.post(baseUrl, gameToAdd, config);\n\n  return response.data;\n};\n\nconst deleteGame = async (id: string): Promise<void> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  await axios.delete(`${baseUrl}/${id}`, config);\n};\n\nexport default {\n  getAll,\n  addNew,\n  deleteGame,\n};\n","import {\r\n  GamesState,\r\n  Action,\r\n  SelectableGame,\r\n  GameType,\r\n  GameStatus,\r\n  ActiveGame,\r\n  ActionType,\r\n} from '../types';\r\n\r\nimport { Dispatch, Reducer } from 'redux';\r\n\r\nimport gameService from '../services/games';\r\n\r\nconst initialState: GamesState = {\r\n  allGames: [],\r\n  activeGame: null,\r\n  loading: false,\r\n};\r\n\r\nconst activate = (game: SelectableGame): ActiveGame => {\r\n  switch (game.type) {\r\n    case GameType.SANAKIERTO:\r\n      return {\r\n        ...game,\r\n        status: GameStatus.WAITING,\r\n        info: {\r\n          turn: 'TODO',\r\n          round: 1,\r\n        },\r\n      };\r\n    default: {\r\n      throw new Error(\r\n        `Something went wrong, expected a selectable game, got ${game.type}`\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nconst reducer: Reducer<GamesState, Action> = (\r\n  state: GamesState = initialState,\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_GAMES: {\r\n      return {\r\n        ...state,\r\n        allGames: action.payload,\r\n      };\r\n    }\r\n    case ActionType.INIT_GAMES_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    }\r\n    case ActionType.INIT_GAMES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        allGames: action.payload,\r\n        loading: false,\r\n      };\r\n    }\r\n    case ActionType.INIT_GAMES_FAILURE: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    }\r\n    case ActionType.ADD_GAME_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    }\r\n    case ActionType.ADD_GAME_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        allGames: state.allGames.concat(action.payload),\r\n        loading: false,\r\n      };\r\n    }\r\n    case ActionType.ADD_GAME_FAILURE: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    }\r\n    case ActionType.DELETE_GAME_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    }\r\n    case ActionType.DELETE_GAME_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        allGames: state.allGames.filter((game) => game.id !== action.payload),\r\n        loading: false,\r\n      };\r\n    }\r\n    case ActionType.DELETE_GAME_FAILURE: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    }\r\n    case ActionType.SET_ACTIVE_GAME: {\r\n      return {\r\n        ...state,\r\n        activeGame: action.payload,\r\n      };\r\n    }\r\n    case 'LAUNCH_GAME': {\r\n      const gameToActivate = state.allGames.find(\r\n        (game) => game.id === action.payload\r\n      );\r\n\r\n      if (!gameToActivate) throw new Error(`Game not found`);\r\n\r\n      const activatedGame = activate(gameToActivate);\r\n\r\n      return {\r\n        ...state,\r\n        activeGame: activatedGame,\r\n        allGames: state.allGames.map((game) =>\r\n          game.id === action.payload\r\n            ? { ...game, status: GameStatus.WAITING }\r\n            : game\r\n        ),\r\n      };\r\n    }\r\n    case 'UPDATE_ACTIVE_GAME': {\r\n      return {\r\n        ...state,\r\n        activeGame: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const initRequest = (): Action => ({\r\n  type: ActionType.INIT_GAMES_REQUEST,\r\n});\r\n\r\nexport const initSuccess = (games: SelectableGame[]): Action => ({\r\n  type: ActionType.INIT_GAMES_SUCCESS,\r\n  payload: games,\r\n});\r\n\r\nexport const initFailure = (): Action => ({\r\n  type: ActionType.INIT_GAMES_FAILURE,\r\n});\r\n\r\nexport const initGames = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    dispatch(initRequest());\r\n\r\n    try {\r\n      const games = await gameService.getAll();\r\n      dispatch(initSuccess(games));\r\n    } catch (error) {\r\n      dispatch(initFailure());\r\n    }\r\n  };\r\n};\r\n\r\n// add game\r\n\r\nexport const addRequest = (): Action => {\r\n  return { type: ActionType.ADD_GAME_REQUEST };\r\n};\r\n\r\nexport const addSuccess = (gameToAdd: SelectableGame): Action => {\r\n  return { type: ActionType.ADD_GAME_SUCCESS, payload: gameToAdd };\r\n};\r\n\r\nexport const addFailure = (): Action => {\r\n  return { type: ActionType.ADD_GAME_FAILURE };\r\n};\r\n\r\nexport const addGame = (game: Omit<SelectableGame, 'id'>) => {\r\n  return async (dispatch: Dispatch) => {\r\n    dispatch(addRequest());\r\n\r\n    try {\r\n      const addedGame = await gameService.addNew(game);\r\n      dispatch(addSuccess(addedGame));\r\n    } catch (error) {\r\n      dispatch(addFailure());\r\n    }\r\n  };\r\n};\r\n\r\n// delete game\r\n\r\nexport const deleteRequest = (): Action => ({\r\n  type: ActionType.DELETE_GAME_REQUEST,\r\n});\r\n\r\nexport const deleteSuccess = (id: string): Action => ({\r\n  type: ActionType.DELETE_GAME_SUCCESS,\r\n  payload: id,\r\n});\r\n\r\nexport const deleteFailure = (): Action => ({\r\n  type: ActionType.DELETE_GAME_FAILURE,\r\n});\r\n\r\nexport const deleteGame = (idToRemove: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    dispatch(deleteRequest());\r\n\r\n    try {\r\n      await gameService.deleteGame(idToRemove);\r\n      dispatch(deleteSuccess(idToRemove));\r\n    } catch (error) {\r\n      dispatch(deleteFailure());\r\n    }\r\n  };\r\n};\r\n\r\nexport const setGames = (games: SelectableGame[]): Action => ({\r\n  type: ActionType.SET_GAMES,\r\n  payload: games,\r\n});\r\n\r\nexport const setActiveGame = (game: ActiveGame | null): Action => ({\r\n  type: ActionType.SET_ACTIVE_GAME,\r\n  payload: game,\r\n});\r\n\r\nexport const launchGame = (id: string): Action => {\r\n  return {\r\n    type: ActionType.LAUNCH_GAME,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const updateGame = (updatedGame: ActiveGame): Action => {\r\n  return {\r\n    type: ActionType.UPDATE_ACTIVE_GAME,\r\n    payload: updatedGame,\r\n  };\r\n};\r\n\r\nexport default reducer;\r\n","import { Dispatch, Reducer } from 'redux';\r\nimport userService from '../services/users';\r\n\r\nimport { Action, User, ActionType, LoggedUser, BaseUser } from '../types';\r\n\r\n/** @TODO handle errors */\r\n\r\nconst initialUser: BaseUser = {\r\n  loggedIn: false,\r\n  socket: null,\r\n  jitsiRoom: null,\r\n  displayName: null,\r\n  loggingIn: false,\r\n};\r\n\r\nconst reducer: Reducer<User, Action> = (\r\n  state: User = initialUser,\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionType.LOGIN_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loggingIn: true,\r\n      };\r\n    }\r\n    case ActionType.LOGIN_SUCCESS: {\r\n      return {\r\n        ...action.payload,\r\n        loggedIn: true,\r\n        jitsiToken: null,\r\n        socket: null,\r\n        jitsiRoom: null,\r\n        loggingIn: false,\r\n      };\r\n    }\r\n    case ActionType.LOGIN_FAILURE: {\r\n      return {\r\n        loggedIn: false,\r\n        socket: null,\r\n        jitsiRoom: null,\r\n        displayName: null,\r\n        loggingIn: false,\r\n      };\r\n    }\r\n    case ActionType.LOGOUT: {\r\n      return {\r\n        loggedIn: false,\r\n        socket: null,\r\n        jitsiRoom: null,\r\n        displayName: null,\r\n        loggingIn: false,\r\n      };\r\n    }\r\n    case ActionType.SET_JITSI_TOKEN: {\r\n      return {\r\n        ...state,\r\n        jitsiToken: action.payload,\r\n      };\r\n    }\r\n    case ActionType.SET_JITSI_ROOM: {\r\n      return {\r\n        ...state,\r\n        jitsiRoom: action.payload,\r\n      };\r\n    }\r\n    case ActionType.SET_SOCKET: {\r\n      return {\r\n        ...state,\r\n        socket: action.payload,\r\n      };\r\n    }\r\n    case ActionType.SET_DISPLAYNAME: {\r\n      return {\r\n        ...state,\r\n        displayName: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks for a logged user in localStrorage. If found, sets it as user and sets token for userservice\r\n */\r\nexport const checkForUser = () => {\r\n  return (dispatch: Dispatch) => {\r\n    const loggedUser = window.localStorage.getItem('kotipelitUser');\r\n\r\n    if (loggedUser) {\r\n      const parsedUser: LoggedUser = JSON.parse(loggedUser);\r\n\r\n      userService.setToken(parsedUser.token);\r\n\r\n      dispatch({\r\n        type: ActionType.LOGIN_SUCCESS,\r\n        payload: parsedUser,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Clears user from localStorage and sets user to null\r\n */\r\nexport const logout = (): Action => {\r\n  window.localStorage.removeItem('kotipelitUser');\r\n  return { type: ActionType.LOGOUT };\r\n};\r\n\r\nexport const loginRequest = (): Action => ({\r\n  type: ActionType.LOGIN_REQUEST,\r\n});\r\n\r\nexport const loginSuccess = (\r\n  user: Pick<LoggedUser, 'username' | 'token'>\r\n): Action => ({\r\n  type: ActionType.LOGIN_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const loginFailure = (): Action => ({ type: ActionType.LOGIN_FAILURE });\r\n\r\n/**\r\n * Logs in user. If succesful, sets token to userservice and saves user in localStorage.\r\n * @param username\r\n * @param password\r\n */\r\nexport const loginUser = (username: string, password: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    dispatch(loginRequest());\r\n\r\n    try {\r\n      const user = await userService.login(username, password);\r\n      userService.setToken(user.token);\r\n\r\n      const loggedUser = {\r\n        ...user,\r\n      };\r\n\r\n      window.localStorage.setItem('kotipelitUser', JSON.stringify(loggedUser));\r\n\r\n      dispatch(loginSuccess(loggedUser));\r\n    } catch (error) {\r\n      dispatch(loginFailure());\r\n    }\r\n  };\r\n};\r\n\r\nexport const setJitsiToken = (token: string): Action => ({\r\n  type: ActionType.SET_JITSI_TOKEN,\r\n  payload: token,\r\n});\r\n\r\nexport const setJitsiRoom = (roomName: string): Action => ({\r\n  type: ActionType.SET_JITSI_ROOM,\r\n  payload: roomName,\r\n});\r\n\r\nexport const setSocket = (socket: SocketIOClient.Socket | null): Action => ({\r\n  type: ActionType.SET_SOCKET,\r\n  payload: socket,\r\n});\r\n\r\nexport const setDisplayName = (name: string): Action => ({\r\n  type: ActionType.SET_DISPLAYNAME,\r\n  payload: name,\r\n});\r\n\r\nexport default reducer;\r\n","import userService from '../services/users';\n\nimport { Action, ActionType, HostChannel, ChannelsState } from '../types';\nimport { Dispatch, Reducer } from 'redux';\n\nconst initialState: ChannelsState = {\n  allChannels: [],\n  loading: false,\n};\n\n/** @TODO handle errors */\n\nconst reducer: Reducer<ChannelsState, Action> = (\n  state: ChannelsState = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionType.INIT_CHANNELS_REQUEST:\n      return { ...state, loading: true };\n    case ActionType.INIT_CHANNELS_SUCCESS:\n      return { allChannels: action.payload, loading: false };\n    case ActionType.INIT_CHANNELS_FAILURE: {\n      return { ...state, loading: false };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const initRequest = (): Action => ({\n  type: ActionType.INIT_CHANNELS_REQUEST,\n});\n\nexport const initSuccess = (channels: HostChannel[]): Action => ({\n  type: ActionType.INIT_CHANNELS_SUCCESS,\n  payload: channels,\n});\nexport const initFailure = (): Action => ({\n  type: ActionType.INIT_CHANNELS_FAILURE,\n});\n\nexport const initChannels = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(initRequest());\n\n    try {\n      const channels = await userService.getAll();\n      dispatch(initSuccess(channels));\n    } catch (error) {\n      dispatch(initFailure());\n    }\n  };\n};\n\nexport default reducer;\n","import { Action, ActionType, AlertState } from '../types';\r\nimport { Reducer } from 'redux';\r\n\r\nconst initialState: AlertState = null;\r\n\r\nconst reducer: Reducer<AlertState, Action> = (\r\n  state: AlertState = initialState,\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_ERROR:\r\n      return action.payload;\r\n    case ActionType.CLEAR_ERROR:\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setError = (alert: string): Action => ({\r\n  type: ActionType.SET_ERROR,\r\n  payload: alert,\r\n});\r\n\r\nexport const clearError = (): Action => ({\r\n  type: ActionType.CLEAR_ERROR,\r\n});\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport games from './games.reducer';\r\nimport user from './user.reducer';\r\nimport channels from './channels.reducer';\r\nimport alert from './alert.reducer';\r\n\r\nexport default combineReducers({ games, user, channels, alert });\r\n","// redux\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\r\n\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { TextField, Fab, CircularProgress } from '@material-ui/core';\r\nimport { State } from '../types';\r\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\r\nimport { loginUser } from '../reducers/user.reducer';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'center',\r\n    },\r\n    formField: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  })\r\n);\r\n\r\nconst LoginForm: React.FC = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const [username, setUsername] = React.useState<string>('');\r\n  const [password, setPassword] = React.useState<string>('');\r\n\r\n  const user = useSelector((state: State) => state.user, shallowEqual);\r\n\r\n  const handleLogin = () => {\r\n    dispatch(loginUser(username, password));\r\n  };\r\n\r\n  if (user.loggedIn) {\r\n    return <Redirect to={`/${user.username}`} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <div className={classes.formField}>\r\n        <TextField\r\n          label=\"Käyttäjätunnus\"\r\n          variant=\"outlined\"\r\n          value={username}\r\n          onChange={({ target }) => setUsername(target.value)}\r\n        />\r\n      </div>\r\n      <div className={classes.formField}>\r\n        <TextField\r\n          label=\"Salasana\"\r\n          variant=\"outlined\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={({ target }) => setPassword(target.value)}\r\n        />\r\n      </div>\r\n      <Fab\r\n        className={classes.formField}\r\n        variant=\"extended\"\r\n        onClick={handleLogin}\r\n      >\r\n        {user.loggingIn ? <CircularProgress /> : 'Kirjaudu'}\r\n      </Fab>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Typography, Button } from '@material-ui/core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { State } from '../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: { padding: theme.spacing(2), textAlign: 'center' },\n    linkContainer: { marginTop: theme.spacing(2) },\n  })\n);\n\n// interface FrontPageProps {}\n\nconst FrontPage: React.FC = () => {\n  const classes = useStyles();\n\n  const channels = useSelector(\n    (state: State) => state.channels.allChannels,\n    shallowEqual\n  );\n\n  const mapChannels = () => {\n    return channels.map((channel) => (\n      <div key={channel.username} className={classes.linkContainer}>\n        <Button component={Link} to={`/${channel.username}`} variant=\"outlined\">\n          {channel.channelName}\n        </Button>\n      </div>\n    ));\n  };\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h1\">LANDING PAGE</Typography>\n    </div>\n  );\n};\n\nexport default FrontPage;\n","import * as React from 'react';\r\n\r\nimport { logout } from '../reducers/user.reducer';\r\n\r\nimport { Typography, Button } from '@material-ui/core';\r\n\r\nimport { User } from '../types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface UserControlsProps {\r\n  user: User;\r\n}\r\n\r\nconst UserControls: React.FC<UserControlsProps> = ({ user }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logout());\r\n    history.push('/');\r\n  };\r\n\r\n  if (!user.loggedIn)\r\n    return history.location.pathname !== '/kirjaudu' ? (\r\n      <Button color=\"inherit\" onClick={() => history.push('/kirjaudu')}>\r\n        <Typography>Kirjaudu</Typography>\r\n      </Button>\r\n    ) : null;\r\n\r\n  return (\r\n    <Button color=\"inherit\" onClick={handleLogout}>\r\n      <Typography>{`Kirjaa ulos ${user.username}`}</Typography>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default UserControls;\r\n","import axios from 'axios';\nimport userService from './users';\n\nconst baseUrl = '/api/games/words';\n\nconst getOne = async (): Promise<string> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.get<string[]>(`${baseUrl}/1`, config);\n\n  if (!Array.isArray(response.data) || !response.data.length) {\n    throw new Error('Invalid response when fetching random words');\n  }\n\n  return response.data[0];\n};\n\nconst getMany = async (amount: number): Promise<string[]> => {\n  if (amount < 1) {\n    throw new Error('Amount must be positive');\n  }\n\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.get<string[]>(`${baseUrl}/${amount}`, config);\n\n  if (!Array.isArray(response.data) || !response.data.length) {\n    throw new Error('Invalid response when fetching random words');\n  }\n\n  return response.data;\n};\n\nexport default {\n  getOne,\n  getMany,\n};\n","import React from 'react';\n\nimport {\n  FormGroup,\n  Typography,\n  Table,\n  TableHead,\n  TableCell,\n  TableRow,\n  TableBody,\n  IconButton,\n  Fab,\n} from '@material-ui/core';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport wordService from '../../services/words';\n\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\n\nimport RefreshIcon from '@material-ui/icons/Refresh';\n\nimport { Form, FastField, FieldArray, FormikProps } from 'formik';\nimport { TextField } from 'formik-material-ui';\n\nimport { SanakiertoPlayer, GameType, GameStatus } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formRow: {\n      alignItems: 'center',\n      marginRight: theme.spacing(2),\n    },\n    marginRight: {\n      marginRight: theme.spacing(2),\n    },\n    gameInfo: {\n      display: 'flex',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    wordCell: {\n      minWidth: 190,\n    },\n    buttonRow: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\ninterface PlayerTableProps {\n  players: SanakiertoPlayer[];\n  handleRefresh: (player: SanakiertoPlayer, index: number) => void;\n}\n\n/**\n * Render function for form player table\n */\nconst PlayerTable: React.FC<PlayerTableProps> = ({\n  players,\n  handleRefresh,\n}) => {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Nimi</TableCell>\n          <TableCell>Sana 1</TableCell>\n          <TableCell>Sana 2</TableCell>\n          <TableCell>Sana 3</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {players.map((player, index) => (\n          <TableRow key={index}>\n            <TableCell>\n              <FastField component={TextField} name={`players.${index}.name`} />\n            </TableCell>\n            {player.words.map((word, index) => (\n              <TableCell key={`${word}${index}`} style={{ minWidth: 190 }}>\n                <span>{word} </span>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleRefresh(player, index)}\n                >\n                  <RefreshIcon />\n                </IconButton>\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\ninterface FormValues {\n  startTime: Date;\n  type: GameType;\n  players: SanakiertoPlayer[];\n  status: GameStatus;\n  rounds: number;\n  hostOnline: boolean;\n}\n\ninterface RenderFormProps {\n  formikProps: FormikProps<FormValues>;\n  handleReturn: () => void;\n}\n\nconst RenderForm: React.FC<RenderFormProps> = ({\n  formikProps,\n  handleReturn,\n}) => {\n  const classes = useStyles();\n\n  /**\n   * Refreshes the word in the given index of the given player with a new, randow word\n   * @param {SanakiertoPlayer} playerToUpdate - the player whose word will be updated\n   * @param {number} wordIndex - the index of the word to refresh\n   */\n  const handleRefresh = async (\n    playerToUpdate: SanakiertoPlayer,\n    wordIndex: number\n  ): Promise<void> => {\n    const randomWord = await wordService.getOne();\n\n    const newPlayers = formikProps.values.players.map((player) => {\n      if (player.id === playerToUpdate.id) {\n        const newWords = player.words;\n        newWords[wordIndex] = randomWord;\n        return { ...player, words: newWords };\n      }\n\n      return player;\n    });\n\n    formikProps.setValues({\n      ...formikProps.values,\n      players: newPlayers,\n    });\n  };\n\n  return (\n    <Form>\n      <div className={classes.gameInfo}>\n        <FormGroup row className={classes.formRow}>\n          <Typography\n            className={classes.marginRight}\n            component=\"label\"\n            variant=\"h6\"\n            htmlFor=\"startTime\"\n          >\n            Alkamisaika:\n          </Typography>\n          <FastField\n            component={KeyboardDateTimePicker}\n            autoOk\n            ampm={false}\n            format=\"d. MMMM HH:mm\"\n            disablePast\n            name=\"startTime\"\n            value={formikProps.values.startTime}\n            onChange={(value: string) =>\n              formikProps.setFieldValue('startTime', value)\n            }\n          />\n        </FormGroup>\n      </div>\n      <div className={classes.gameInfo}>\n        <Typography\n          className={classes.marginRight}\n          component=\"label\"\n          variant=\"h6\"\n          htmlFor=\"players\"\n        >\n          Pelaajat:\n        </Typography>\n      </div>\n      <FieldArray\n        name=\"players\"\n        /**\n         * arrayHelpers can be used to implement adding/removing fields,\n         * see https://jaredpalmer.com/formik/docs/api/fieldarray#fieldarray-helpers\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        render={(arrayHelpers) => (\n          <PlayerTable\n            players={formikProps.values.players}\n            handleRefresh={handleRefresh}\n          />\n        )}\n      />\n      <div className={classes.buttonRow}>\n        <Fab\n          variant=\"extended\"\n          color=\"primary\"\n          className={classes.marginRight}\n          type=\"submit\"\n        >\n          Luo peli\n        </Fab>\n        <Fab variant=\"extended\" color=\"secondary\" onClick={handleReturn}>\n          Peruuta\n        </Fab>\n      </div>\n    </Form>\n  );\n};\n\nexport default RenderForm;\n","import React from 'react';\n\nimport shortid from 'shortid';\nimport wordService from '../../services/words';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { Typography, Divider, Fab } from '@material-ui/core';\n\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport fiLocale from 'date-fns/locale/fi';\n\nimport { Formik } from 'formik';\n\nimport { useHistory } from 'react-router-dom';\n\nimport RenderForm from './RenderForm';\nimport { useDispatch } from 'react-redux';\nimport { addGame } from '../../reducers/games.reducer';\nimport { GameType, GameStatus, SanakiertoPlayer } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    marginRight: {\n      marginRight: theme.spacing(2),\n    },\n    marginTop: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\n/**\n * Generates initial player objects to be used in state\n * @param playerCount - number of players\n * @param wordsPerPlayer - words per player\n * @return {Promise} - Array of player objects with unique, randow words each\n */\nexport const initializePlayers = async (\n  playerCount: number,\n  wordsPerPlayer: number\n): Promise<SanakiertoPlayer[]> => {\n  const players = [];\n\n  const randomWords = await wordService.getMany(playerCount * wordsPerPlayer);\n  for (let i = 1; i <= playerCount; i++) {\n    const words: string[] = [];\n\n    for (let j = 0; j < wordsPerPlayer; j++) {\n      const word = randomWords.pop();\n\n      if (word) words.push(word);\n    }\n\n    players.push({\n      id: shortid.generate(),\n      name: `Pelaaja ${i}`,\n      words,\n      points: 0,\n      online: false,\n    });\n  }\n\n  return players;\n};\n\nconst NewGame: React.FC = () => {\n  const [gameType, setGameType] = React.useState<null | GameType>(null);\n  const [players, setPlayers] = React.useState<null | SanakiertoPlayer[]>(null);\n\n  React.useEffect(() => {\n    const init = async () => {\n      const initialPlayers = await initializePlayers(5, 3);\n      setPlayers(initialPlayers);\n    };\n\n    try {\n      init();\n    } catch (error) {\n      console.error('TODO: handle errors');\n    }\n  }, []);\n\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  // react router\n  const history = useHistory();\n\n  /**\n   * Redirects back to host main page\n   */\n  const handleReturn = (): void => {\n    history.goBack();\n  };\n\n  const chooseType = () => (\n    <div className={classes.marginTop}>\n      <div>\n        <Typography variant=\"h6\">Pelin tyyppi:</Typography>\n        <div>\n          <Fab\n            onClick={() => setGameType(GameType.SANAKIERTO)}\n            variant=\"extended\"\n            className={classes.marginTop}\n          >\n            Sanakierto\n          </Fab>\n        </div>\n        <div>\n          <Fab disabled variant=\"extended\" className={classes.marginTop}>\n            Toinen peli\n          </Fab>\n        </div>\n        <div>\n          <Fab disabled variant=\"extended\" className={classes.marginTop}>\n            Kolmas peli\n          </Fab>\n        </div>\n      </div>\n    </div>\n  );\n\n  const gameForm = () => {\n    if (!players) {\n      return <div>Ladataan...</div>;\n    }\n\n    return (\n      <MuiPickersUtilsProvider utils={DateFnsUtils} locale={fiLocale}>\n        <Formik\n          initialValues={{\n            startTime: new Date(),\n            type: GameType.SANAKIERTO,\n            players,\n            status: GameStatus.UPCOMING,\n            rounds: 3,\n            hostOnline: false,\n          }}\n          onSubmit={(values, actions) => {\n            console.log('values', values, 'actions', actions);\n            console.log('adding new game');\n            dispatch(addGame(values));\n            handleReturn();\n          }}\n        >\n          {(formikProps) => (\n            <RenderForm handleReturn={handleReturn} formikProps={formikProps} />\n          )}\n        </Formik>\n      </MuiPickersUtilsProvider>\n    );\n  };\n\n  /** @TODO validate inputs with Yup ? */\n\n  return (\n    <div>\n      <Typography variant=\"h4\" gutterBottom>\n        Luo uusi peli\n      </Typography>\n      <Divider />\n      {gameType ? gameForm() : chooseType()}\n    </div>\n  );\n};\n\nexport default NewGame;\n","import { HostEvent, EmittedEvent, PlayerEvent, ActiveGame } from '../../types';\n\nexport const createRoom = (gameId: string): EmittedEvent => ({\n  event: HostEvent.CREATE_ROOM,\n  data: gameId,\n});\n\nexport const joinGame = (): EmittedEvent => ({\n  event: PlayerEvent.JOIN_GAME,\n  data: null,\n});\n\nexport const jitsiReady = (\n  gameId: string,\n  jitsiRoom: string\n): EmittedEvent => ({\n  event: HostEvent.JITSI_READY,\n  data: { gameId, jitsiRoom },\n});\n\nexport const startGame = (gameId: string): EmittedEvent => ({\n  event: HostEvent.START_GAME,\n  data: gameId,\n});\n\nexport const endGame = (gameId: string): EmittedEvent => ({\n  event: HostEvent.END_GAME,\n  data: gameId,\n});\n\nexport const updateGame = (game: ActiveGame): EmittedEvent => ({\n  event: HostEvent.UPDATE_GAME,\n  data: game,\n});\n","import {\r\n  CommonEvent,\r\n  PlayerEvent,\r\n  HostEvent,\r\n  RecievedError,\r\n  CreateSuccessResponse,\r\n  ActiveGame,\r\n  JoinSuccessResponse,\r\n  GameStatus,\r\n} from '../../types';\r\nimport { log } from '../../utils/logger';\r\nimport store from '../../store';\r\nimport { setJitsiToken, setJitsiRoom } from '../../reducers/user.reducer';\r\nimport { setActiveGame, setGames } from '../../reducers/games.reducer';\r\nimport socketService from './service';\r\nimport * as events from './events';\r\nimport { setError, clearError } from '../../reducers/alert.reducer';\r\n\r\n/** @TODO handle error on connect */\r\nexport const connect = (\r\n  socket: SocketIOClient.Socket,\r\n  token: string,\r\n  callback: Function\r\n) => {\r\n  return () => {\r\n    socket\r\n      .emit(CommonEvent.AUTH_REQUEST, { token })\r\n      .on(CommonEvent.AUTHENTICATED, () => {\r\n        log('socketio authorized');\r\n\r\n        callback(socket);\r\n      })\r\n      .on(CommonEvent.UNAUTHORIZED, (error: { message: string }) => {\r\n        log('socketio unauthorized');\r\n\r\n        throw new Error(error.message);\r\n      });\r\n  };\r\n};\r\n\r\nexport const playerJoined = (playerId: string) => {\r\n  log(`recieved ${CommonEvent.PLAYER_JOINED}`);\r\n\r\n  const currentGame = store.getState().games.activeGame;\r\n\r\n  if (!currentGame) throw new Error('Player joined but no active game is set');\r\n\r\n  const newPlayers = currentGame.players.map((player) => {\r\n    return player.id === playerId ? { ...player, online: true } : player;\r\n  });\r\n\r\n  store.dispatch(\r\n    setActiveGame({\r\n      ...currentGame,\r\n      players: newPlayers,\r\n    })\r\n  );\r\n};\r\n\r\n/** HOST */\r\n\r\nexport const createSuccess = (data: CreateSuccessResponse) => {\r\n  log(`recieved ${HostEvent.CREATE_SUCCESS}, data:`);\r\n  log(data);\r\n\r\n  store.dispatch(setJitsiRoom(data.jitsiRoom));\r\n  store.dispatch(setActiveGame(data.game));\r\n  store.dispatch(setJitsiToken(data.jitsiToken));\r\n};\r\n\r\nexport const createFailure = (data: RecievedError) =>\r\n  log(`recieved ${HostEvent.CREATE_FAILURE}: ${data.error}`);\r\n\r\nexport const updateSuccess = (game: ActiveGame) => {\r\n  log(`recieved ${HostEvent.UPDATE_SUCCESS}, data:`);\r\n  log(game);\r\n\r\n  store.dispatch(setActiveGame(game));\r\n};\r\n\r\nexport const updateFailure = (data: RecievedError) =>\r\n  log(`recieved ${HostEvent.UPDATE_FAILURE}: ${data.error}`);\r\n\r\nexport const startSuccess = (startedGame: ActiveGame) => {\r\n  log(`recieved ${HostEvent.START_SUCCESS}:`);\r\n  log(startedGame);\r\n\r\n  store.dispatch(setActiveGame(startedGame));\r\n};\r\nexport const startFailure = (data: RecievedError) =>\r\n  log(`recieved ${HostEvent.START_FAILURE}: ${data.error}`);\r\n\r\nexport const endSuccess = (gameId: string) => {\r\n  log(`recieved ${HostEvent.END_SUCCESS}:`);\r\n\r\n  const { allGames, activeGame } = store.getState().games;\r\n\r\n  if (activeGame) {\r\n    const newGames = allGames.map((game) =>\r\n      game.id === gameId\r\n        ? { ...game, status: GameStatus.FINISHED, players: activeGame.players }\r\n        : game\r\n    );\r\n\r\n    store.dispatch(setGames(newGames));\r\n\r\n    store.dispatch(\r\n      setActiveGame({ ...activeGame, status: GameStatus.FINISHED })\r\n    );\r\n  }\r\n};\r\n\r\nexport const endFailure = (data: RecievedError) => {\r\n  log(`recieved ${HostEvent.END_FAILURE}: ${data.error}`);\r\n};\r\n\r\n/** PLAYER */\r\n\r\nexport const joinSuccess = (data: JoinSuccessResponse) => {\r\n  log(`recieved ${PlayerEvent.JOIN_SUCCESS}:`);\r\n  log(data);\r\n\r\n  store.dispatch(clearError());\r\n  store.dispatch(setJitsiRoom(data.jitsiRoom));\r\n  store.dispatch(setActiveGame(data.game));\r\n};\r\n\r\nexport const joinFailure = (data: RecievedError) => {\r\n  log(`recieved ${PlayerEvent.JOIN_FAILURE}: ${data.error}`);\r\n\r\n  store.dispatch(setError('Host ei ole vielä käynnistänyt peliä.'));\r\n};\r\n\r\nexport const gameReady = () => {\r\n  log(`recieved ${PlayerEvent.GAME_READY}`);\r\n\r\n  try {\r\n    const socket = store.getState().user.socket;\r\n\r\n    if (!socket) throw new Error('No socket set for user');\r\n\r\n    socketService.emit(socket, events.joinGame());\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\nexport const gameStarting = (game: ActiveGame) => {\r\n  log(`recieved ${PlayerEvent.GAME_STARTING}:`);\r\n  log(game);\r\n\r\n  store.dispatch(setActiveGame(game));\r\n};\r\n\r\nexport const gameUpdated = (game: ActiveGame) => {\r\n  log(`recieved ${PlayerEvent.GAME_UPDATED}:`);\r\n  log(game);\r\n\r\n  store.dispatch(setActiveGame(game));\r\n};\r\n\r\nexport const gameEnded = () => {\r\n  log(`recieved ${PlayerEvent.GAME_ENDED}:`);\r\n\r\n  const activeGame = store.getState().games.activeGame;\r\n\r\n  if (activeGame) {\r\n    store.dispatch(\r\n      setActiveGame({ ...activeGame, status: GameStatus.FINISHED })\r\n    );\r\n  }\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n  CommonEvent,\r\n  HostEvent,\r\n  PlayerEvent,\r\n  EmittedEvent,\r\n  RecievedError,\r\n  CreateSuccessResponse,\r\n  ActiveGame,\r\n  JoinSuccessResponse,\r\n} from '../../types';\r\n\r\nimport * as callbacks from './callbacks';\r\nimport { log } from '../../utils/logger';\r\n\r\nconst attachListeners = (socket: SocketIOClient.Socket, isHost: boolean) => {\r\n  // default listeners\r\n\r\n  socket.on(PlayerEvent.GAME_UPDATED, (game: ActiveGame) =>\r\n    callbacks.gameUpdated(game)\r\n  );\r\n\r\n  if (isHost) {\r\n    // host listeners\r\n\r\n    socket.on(HostEvent.CREATE_SUCCESS, (data: CreateSuccessResponse) =>\r\n      callbacks.createSuccess(data)\r\n    );\r\n    socket.on(HostEvent.CREATE_FAILURE, (data: RecievedError) =>\r\n      callbacks.createFailure(data)\r\n    );\r\n\r\n    socket.on(HostEvent.START_SUCCESS, (game: ActiveGame) => {\r\n      callbacks.startSuccess(game);\r\n    });\r\n    socket.on(HostEvent.START_FAILURE, (data: RecievedError) =>\r\n      callbacks.startFailure(data)\r\n    );\r\n\r\n    socket.on(HostEvent.UPDATE_SUCCESS, (game: ActiveGame) =>\r\n      callbacks.updateSuccess(game)\r\n    );\r\n    socket.on(HostEvent.UPDATE_FAILURE, (data: RecievedError) =>\r\n      callbacks.updateFailure(data)\r\n    );\r\n\r\n    socket.on(HostEvent.END_SUCCESS, (gameId: string) => {\r\n      callbacks.endSuccess(gameId);\r\n    });\r\n    socket.on(HostEvent.END_FAILURE, (data: RecievedError) => {\r\n      callbacks.endFailure(data);\r\n    });\r\n  } else {\r\n    // player listeners\r\n\r\n    socket.on(PlayerEvent.JOIN_SUCCESS, (data: JoinSuccessResponse) =>\r\n      callbacks.joinSuccess(data)\r\n    );\r\n    socket.on(PlayerEvent.JOIN_FAILURE, (data: RecievedError) =>\r\n      callbacks.joinFailure(data)\r\n    );\r\n\r\n    socket.on(PlayerEvent.GAME_READY, callbacks.gameReady);\r\n\r\n    socket.on(PlayerEvent.GAME_STARTING, (game: ActiveGame) =>\r\n      callbacks.gameStarting(game)\r\n    );\r\n\r\n    socket.on(PlayerEvent.GAME_ENDED, () => {\r\n      callbacks.gameEnded();\r\n    });\r\n  }\r\n};\r\n\r\nconst emit = (socket: SocketIOClient.Socket, eventObj: EmittedEvent): void => {\r\n  const { event, data } = eventObj;\r\n\r\n  log(`Emitting ${event}`);\r\n\r\n  if (data) {\r\n    log('Data:');\r\n    log(data);\r\n  }\r\n\r\n  socket.emit(event, data);\r\n};\r\n\r\nconst getTokenForSocket = async (\r\n  hostName: string,\r\n  playerId: string\r\n): Promise<{ token: string; displayName: string }> => {\r\n  const response = await axios.get(`/api/games/join/${hostName}/${playerId}`);\r\n\r\n  return response.data;\r\n};\r\n\r\nconst authenticateSocket = (\r\n  socket: SocketIOClient.Socket,\r\n  token: string,\r\n  callback: Function\r\n): SocketIOClient.Socket => {\r\n  socket.on(CommonEvent.CONNECT, callbacks.connect(socket, token, callback));\r\n\r\n  return socket;\r\n};\r\n\r\nexport default {\r\n  getTokenForSocket,\r\n  authenticateSocket,\r\n  attachListeners,\r\n  emit,\r\n};\r\n","import socketIO from 'socket.io-client';\r\nimport store from '../../store';\r\nimport { setDisplayName, setSocket } from '../../reducers/user.reducer';\r\nimport socketService from './service';\r\nimport * as events from './events';\r\nimport { ActiveGame, LoggedUser } from '../../types';\r\nimport { log } from '../../utils/logger';\r\nimport { setActiveGame } from '../../reducers/games.reducer';\r\nimport { setError } from '../../reducers/alert.reducer';\r\n\r\nexport const emitJitsiReady = (gameId: string, jitsiRoom: string): void => {\r\n  try {\r\n    const socket = store.getState().user.socket;\r\n\r\n    if (!socket) throw new Error('Socket not set for user');\r\n\r\n    socketService.emit(socket, events.jitsiReady(gameId, jitsiRoom));\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\nexport const startGame = (gameId: string): void => {\r\n  try {\r\n    const socket = store.getState().user.socket;\r\n\r\n    if (!socket) throw new Error('Socket not set for user');\r\n\r\n    socketService.emit(socket, events.startGame(gameId));\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\nexport const updateGame = (game: ActiveGame) => {\r\n  try {\r\n    const socket = store.getState().user.socket;\r\n\r\n    if (!socket) throw new Error('Socket not set for user');\r\n\r\n    socketService.emit(socket, events.updateGame(game));\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\nexport const endGame = (gameId: string): void => {\r\n  try {\r\n    const socket = store.getState().user.socket;\r\n\r\n    if (!socket) throw new Error('Socket not set for user');\r\n\r\n    socketService.emit(socket, events.endGame(gameId));\r\n  } catch (error) {\r\n    console.error(error.message);\r\n  }\r\n};\r\n\r\nexport const getAuthCallback = (gameId: string | null): Function => {\r\n  if (gameId) {\r\n    return (socket: SocketIOClient.Socket) => {\r\n      socketService.attachListeners(socket, true);\r\n      socketService.emit(socket, events.createRoom(gameId));\r\n    };\r\n  }\r\n\r\n  return (socket: SocketIOClient.Socket) => {\r\n    socketService.attachListeners(socket, false);\r\n    socketService.emit(socket, events.joinGame());\r\n  };\r\n};\r\n\r\nexport const tearDownSocket = (): void => {\r\n  log('tearing down socket and active game');\r\n  const socket = store.getState().user.socket;\r\n\r\n  if (socket) {\r\n    socket.disconnect();\r\n\r\n    store.dispatch(setSocket(null));\r\n  }\r\n\r\n  store.dispatch(setActiveGame(null));\r\n};\r\n\r\nexport const initHostSocket = (\r\n  user: LoggedUser,\r\n  gameId: string\r\n): SocketIOClient.Socket => {\r\n  if (!gameId) throw new Error(`Pelin id puuttuu`);\r\n\r\n  const socket = socketIO();\r\n\r\n  store.dispatch(setSocket(socket));\r\n\r\n  return socketService.authenticateSocket(\r\n    socket,\r\n    user.token,\r\n    getAuthCallback(gameId)\r\n  );\r\n};\r\n\r\nexport const initPlayerSocket = async (\r\n  hostName: string,\r\n  playerId: string\r\n): Promise<void> => {\r\n  if (!playerId) throw new Error('Pelaajan id puuttuu');\r\n\r\n  try {\r\n    const data = await socketService.getTokenForSocket(hostName, playerId);\r\n\r\n    log(`Setting display name to '${data.displayName}'`);\r\n    store.dispatch(setDisplayName(data.displayName));\r\n\r\n    const socket = socketIO();\r\n\r\n    store.dispatch(setSocket(socket));\r\n\r\n    socketService.authenticateSocket(socket, data.token, getAuthCallback(null));\r\n  } catch (error) {\r\n    store.dispatch(\r\n      setError('Peliin liittyminen epäonnistui. Tarkista osoite.')\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport Jitsi from 'react-jitsi';\r\nimport { Fab, Typography } from '@material-ui/core';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { ConfigOptions } from 'react-jitsi/dist/types';\r\nimport { JitsiApi } from '../types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    loader: {\r\n      height: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    btnContainer: { textAlign: 'center', marginBottom: theme.spacing(2) },\r\n  })\r\n);\r\n\r\nconst Loader: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.loader}>\r\n      <Typography>Ladataan videoyhteyttä...</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface JitsiFrameProps {\r\n  token: string | null;\r\n  roomName: string;\r\n  displayName: string | null;\r\n  loadedCallback?: () => void;\r\n  dev?: boolean;\r\n}\r\n\r\nconst JitsiFrame: React.FC<JitsiFrameProps> = ({\r\n  token,\r\n  roomName,\r\n  displayName,\r\n  loadedCallback,\r\n  dev,\r\n}) => {\r\n  const [showJitsi, setShowJitsi] = React.useState<boolean>(!dev);\r\n  const [jitsi, setJitsi] = React.useState<null | JitsiApi>(null);\r\n\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    return () => jitsi?.dispose();\r\n  }, []);\r\n\r\n  const handleLeave = (api: JitsiApi) => {\r\n    setShowJitsi(false);\r\n    api.dispose();\r\n  };\r\n\r\n  /** attach listeners for jitsi events here. info: https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe */\r\n  const handleAPIloaded = (api: JitsiApi) => {\r\n    api.on('videoConferenceLeft', () => handleLeave(api));\r\n\r\n    setJitsi(api);\r\n\r\n    if (loadedCallback) loadedCallback();\r\n  };\r\n\r\n  if (!showJitsi) {\r\n    return (\r\n      <div className={classes.loader}>\r\n        <div className={classes.btnContainer}>\r\n          <Fab variant=\"extended\" onClick={() => setShowJitsi(true)}>\r\n            Käynnistä video\r\n          </Fab>\r\n        </div>\r\n        {token && (\r\n          <div className={classes.btnContainer}>\r\n            <Fab variant=\"extended\" onClick={loadedCallback}>\r\n              Trigger API loaded\r\n            </Fab>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // https://github.com/jitsi/jitsi-meet/blob/master/config.js\r\n  const config = {\r\n    subject: ' ', // hides room name\r\n  };\r\n\r\n  // https://github.com/jitsi/jitsi-meet/blob/master/interface_config.js\r\n  const interfaceConfig = {\r\n    DEFAULT_REMOTE_DISPLAY_NAME: 'Pelaaja',\r\n    DISABLE_DOMINANT_SPEAKER_INDICATOR: true,\r\n    DISABLE_FOCUS_INDICATOR: true,\r\n    DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,\r\n    DISABLE_PRESENCE_STATUS: true,\r\n    DISABLE_RINGING: true,\r\n    DISABLE_TRANSCRIPTION_SUBTITLES: true,\r\n    DISPLAY_WELCOME_PAGE_CONTENT: false,\r\n    DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: true,\r\n    ENABLE_DIAL_OUT: false,\r\n    filmStripOnly: true,\r\n    GENERATE_ROOMNAMES_ON_WELCOME_PAGE: false,\r\n    HIDE_INVITE_MORE_HEADER: true,\r\n    SHOW_JITSI_WATERMARK: false,\r\n    SHOW_WATERMARK_FOR_GUESTS: false,\r\n    RECENT_LIST_ENABLED: false,\r\n  };\r\n\r\n  /** @TODO add display name from user */\r\n  return (\r\n    <Jitsi\r\n      containerStyle={{ width: '100%', height: '100%' }}\r\n      roomName={roomName} // must match room name set in token\r\n      displayName={displayName ? displayName : undefined}\r\n      domain=\"meet.kotipelit.com\"\r\n      jwt={token ? token : undefined} // needs a valid token to auth, see readme\r\n      loadingComponent={Loader}\r\n      onAPILoad={(JitsiMeetApi) => handleAPIloaded(JitsiMeetApi as JitsiApi)}\r\n      config={config as ConfigOptions}\r\n      interfaceConfig={interfaceConfig}\r\n    />\r\n  );\r\n};\r\n\r\nexport default JitsiFrame;\r\n","import React from 'react';\r\n\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport {\r\n  TableBody,\r\n  Table,\r\n  Fab,\r\n  TableRow,\r\n  TableCell,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nimport { SanakiertoActive } from '../../types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    startBtn: {\r\n      textAlign: 'center',\r\n      margin: theme.spacing(2),\r\n    },\r\n  })\r\n);\r\n\r\ninterface WaitingRoomProps {\r\n  game: SanakiertoActive;\r\n  handleStart?: () => void;\r\n}\r\n\r\nconst WaitingRoom: React.FC<WaitingRoomProps> = ({ game, handleStart }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      {handleStart && (\r\n        <div className={classes.startBtn}>\r\n          <Fab variant=\"extended\" onClick={handleStart}>\r\n            Aloita peli\r\n          </Fab>\r\n        </div>\r\n      )}\r\n      <Table>\r\n        <TableBody>\r\n          {game.players.map((p) => (\r\n            <TableRow key={p.id}>\r\n              <TableCell>{p.name}</TableCell>\r\n              <TableCell>\r\n                {p.online ? (\r\n                  <Typography variant=\"caption\" color=\"primary\">\r\n                    Paikalla\r\n                  </Typography>\r\n                ) : (\r\n                  <Typography variant=\"caption\" color=\"textSecondary\">\r\n                    Odotetaan...\r\n                  </Typography>\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaitingRoom;\r\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  Typography,\n  Table,\n  TableRow,\n  TableCell,\n  Fab,\n  Checkbox,\n  TableBody,\n} from '@material-ui/core';\nimport { SanakiertoPlayer } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(2),\n    },\n    noPaddingX: {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    saveBtnContainer: {\n      textAlign: 'center',\n      marginTop: theme.spacing(2),\n    },\n    additionBox: {\n      minWidth: 50,\n    },\n  })\n);\n\ninterface ScoreBoardProps {\n  players: SanakiertoPlayer[];\n  turn: number;\n  handleUpdate: (players: SanakiertoPlayer[]) => void;\n}\n\nconst ScoreBoard: React.FC<ScoreBoardProps> = ({\n  players,\n  turn,\n  handleUpdate,\n}) => {\n  const classes = useStyles();\n  const [checkBoxes, setCheckboxes] = React.useState(\n    new Array(players.length).fill(false)\n  );\n\n  const getPointAddition = (playerIndex: number): number => {\n    const playerCount = players.length;\n    const correctAnswers = checkBoxes.reduce(\n      (sum, next) => (next ? sum + 1 : sum),\n      0\n    );\n\n    switch (correctAnswers) {\n      case playerCount - 1: {\n        return playerIndex === turn ? -50 : 0;\n      }\n      case 0: {\n        return playerIndex === turn ? -50 : 0;\n      }\n      case 1: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 100 : 0;\n      }\n      case 2: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 30 : 0;\n      }\n      case 3: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 10 : 0;\n      }\n    }\n\n    return correctAnswers;\n  };\n\n  const additionElement = (addition: number) => {\n    const valueString = addition > 0 ? `+${addition}` : `${addition}`;\n    let color = '';\n\n    if (addition > 0) color = 'green';\n    if (addition < 0) color = 'red';\n\n    return <span style={{ color }}>{valueString}</span>;\n  };\n\n  const updateGameState = () => {\n    const newPlayers: SanakiertoPlayer[] = players.map((player, index) => {\n      return {\n        ...player,\n        points: player.points + getPointAddition(index),\n      };\n    });\n\n    setCheckboxes(new Array(players.length).fill(false));\n    handleUpdate(newPlayers);\n  };\n\n  return (\n    <div className={classes.container}>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">Pelaaja</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">Pisteet</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">+ / -</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\" noWrap>\n                Vastaus oikein\n              </Typography>\n            </TableCell>\n          </TableRow>\n          {players.map((player, index) => {\n            return (\n              <TableRow key={index}>\n                <TableCell className={classes.noPaddingX} align=\"center\">\n                  <span>{player.name}</span>\n                  {player.online ? null : (\n                    <Typography\n                      variant=\"caption\"\n                      color=\"error\"\n                    >{` (offline)`}</Typography>\n                  )}\n                </TableCell>\n                <TableCell align=\"center\">{player.points}</TableCell>\n                <TableCell\n                  align=\"center\"\n                  className={`${classes.noPaddingX} ${classes.additionBox}`}\n                >\n                  {additionElement(getPointAddition(index))}\n                </TableCell>\n                <TableCell align=\"center\" padding=\"checkbox\">\n                  {index === turn ? (\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Kysyjä\n                    </Typography>\n                  ) : (\n                    <Checkbox\n                      value={checkBoxes[index]}\n                      checked={checkBoxes[index]}\n                      onChange={() => {\n                        const newValues = [...checkBoxes];\n                        newValues[index] = !newValues[index];\n                        setCheckboxes(newValues);\n                      }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <div className={classes.saveBtnContainer}>\n        <Fab variant=\"extended\" color=\"primary\" onClick={updateGameState}>\n          Päivitä pisteet\n        </Fab>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React from 'react';\n\nconst useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = React.useRef<() => void>();\n\n  // Remember the latest callback\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval\n  React.useEffect(() => {\n    const tick = () => {\n      if (!savedCallback || !savedCallback.current)\n        throw new Error('Problem with interval hook');\n      savedCallback.current();\n    };\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React from 'react';\r\n\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Typography, Fab } from '@material-ui/core';\r\nimport ScoreBoard from './ScoreBoard';\r\nimport { SanakiertoActive, SanakiertoPlayer, State } from '../../types';\r\nimport { useSelector } from 'react-redux';\r\nimport useInterval from '../../hooks/useInterval';\r\nimport { updateGame } from '../../services/socketio/actions';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    container: {\r\n      padding: theme.spacing(1),\r\n    },\r\n    flex: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n  })\r\n);\r\n\r\ninterface HostPanelProps {\r\n  game: SanakiertoActive;\r\n}\r\n\r\nconst HostPanel: React.FC<HostPanelProps> = ({ game }) => {\r\n  const classes = useStyles();\r\n  const socket = useSelector((state: State) => state.user.socket);\r\n\r\n  const [timerRunning, setTimerRunning] = React.useState<boolean>(false);\r\n  const [timer, setTimer] = React.useState<number>(90);\r\n\r\n  useInterval(\r\n    () => {\r\n      setTimer(timer - 1);\r\n\r\n      if (timer === 1) {\r\n        setTimerRunning(false);\r\n      }\r\n    },\r\n    timerRunning ? 1000 : null\r\n  );\r\n\r\n  if (!socket) return <Typography>Yhdistetään...</Typography>;\r\n\r\n  const { players, info } = game;\r\n\r\n  const playerInTurnIndex = players.findIndex(\r\n    (player) => player.id === info.turn\r\n  );\r\n\r\n  if (playerInTurnIndex < 0)\r\n    throw new Error('Something went wrong with player turns');\r\n\r\n  const playerWithTurn = players[playerInTurnIndex];\r\n\r\n  const handleUpdate = (players: SanakiertoPlayer[]): void => {\r\n    let round: number;\r\n    let turn: string;\r\n\r\n    if (playerInTurnIndex === players.length - 1) {\r\n      round = game.info.round + 1;\r\n      turn = players[0].id;\r\n    } else {\r\n      round = game.info.round;\r\n      turn = players[playerInTurnIndex + 1].id;\r\n    }\r\n\r\n    const newGameState: SanakiertoActive = {\r\n      ...game,\r\n      players,\r\n      info: {\r\n        round,\r\n        turn,\r\n      },\r\n    };\r\n\r\n    updateGame(newGameState);\r\n    if (timerRunning) setTimerRunning(false);\r\n    setTimer(90);\r\n  };\r\n\r\n  const startTimer = () => {\r\n    if (timer !== 0) {\r\n      setTimerRunning(!timerRunning);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Typography variant=\"h6\">{`Kierros ${game.info.round}`}</Typography>\r\n      <div className={classes.flex}>\r\n        <div className={classes.grow}>\r\n          <Typography\r\n            variant=\"overline\"\r\n            component=\"div\"\r\n            className={classes.grow}\r\n          >\r\n            Vuorossa:\r\n          </Typography>\r\n          <Typography component=\"div\" gutterBottom>\r\n            {playerWithTurn.name}\r\n          </Typography>\r\n        </div>\r\n        <div className={classes.grow}>\r\n          <Typography\r\n            variant=\"overline\"\r\n            component=\"div\"\r\n            className={classes.grow}\r\n          >\r\n            Sanat:\r\n          </Typography>\r\n          <Typography component=\"div\" gutterBottom>\r\n            {playerWithTurn.words.join(' / ')}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Typography variant=\"overline\" component=\"div\">\r\n          Vastausaika:\r\n        </Typography>\r\n        <div className={classes.flex}>\r\n          <Typography component=\"div\" className={classes.grow}>\r\n            {timer !== 0 ? (\r\n              `${timer} sekuntia`\r\n            ) : (\r\n              <Typography color=\"textSecondary\">Aika loppui</Typography>\r\n            )}\r\n          </Typography>\r\n          <div className={classes.grow}>\r\n            <Fab\r\n              variant=\"extended\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={startTimer}\r\n              disabled={timer === 0}\r\n            >\r\n              {timerRunning ? 'Pysäytä' : 'Käynnistä'}\r\n            </Fab>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ScoreBoard\r\n        players={game.players}\r\n        turn={game.players.indexOf(playerWithTurn)}\r\n        handleUpdate={handleUpdate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HostPanel;\r\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { SanakiertoPlayer } from '../../types';\nimport {\n  Typography,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n  Fab,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n    },\n    marginTop: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\ninterface ResultsProps {\n  results: SanakiertoPlayer[];\n  handleTearDown?: () => void;\n}\n\nconst Results: React.FC<ResultsProps> = ({ results, handleTearDown }) => {\n  const classes = useStyles();\n\n  // use state to persist results even when host ends game\n  const [savedResults] = React.useState(results);\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h4\" gutterBottom>\n        TULOKSET\n      </Typography>\n      <Table>\n        <TableBody>\n          {savedResults.map((player) => (\n            <TableRow key={player.name}>\n              <TableCell align=\"center\">{player.name}</TableCell>\n              <TableCell align=\"center\">{`${player.points} pistettä`}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      {handleTearDown && (\n        <div className={classes.marginTop}>\n          <Fab variant=\"extended\" color=\"secondary\" onClick={handleTearDown}>\n            Lopeta peli\n          </Fab>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n","import React from 'react';\r\n\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    centered: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      width: '100%',\r\n      height: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n  })\r\n);\r\n\r\ninterface LoaderProps {\r\n  msg: string;\r\n  spinner?: boolean;\r\n}\r\n\r\nconst Loader: React.FC<LoaderProps> = ({ msg, spinner }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.centered}>\r\n      <Typography gutterBottom>{msg}</Typography>\r\n      {spinner && (\r\n        <div>\r\n          <CircularProgress />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\n\nimport { log } from '../../utils/logger';\n\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { useParams, Redirect } from 'react-router';\nimport * as actions from '../../services/socketio/actions';\nimport JitsiFrame from '../JitsiFrame';\nimport { GameStatus, State, SanakiertoPlayer } from '../../types';\nimport WaitingRoom from './WaitingRoom';\nimport HostPanel from './HostPanel';\nimport Results from './Results';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { LoggedUser } from '../../types';\nimport Loader from '../Loader';\nimport { Paper } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n    },\n    jitsiContainer: {\n      boxSizing: 'border-box',\n      width: '65%',\n      backgroundColor: theme.palette.grey[400],\n\n      height: 568,\n    },\n    hostControls: {\n      boxSizing: 'border-box',\n      width: '35%',\n      padding: theme.spacing(2),\n      marginLeft: theme.spacing(1),\n      height: 568,\n    },\n  })\n);\n\ninterface ParamTypes {\n  gameID: string;\n}\n\ninterface SanakiertoHostViewProps {\n  user: LoggedUser;\n}\n\nconst SanakiertoHostView: React.FC<SanakiertoHostViewProps> = ({ user }) => {\n  const classes = useStyles();\n\n  const [error, setError] = React.useState<null | string>(null);\n\n  const activeGame = useSelector(\n    (state: State) => state.games.activeGame,\n    shallowEqual\n  );\n\n  const { gameID } = useParams<ParamTypes>();\n  const { jitsiToken, jitsiRoom, username, socket } = user;\n\n  React.useEffect(() => {\n    log('initializing socket');\n\n    try {\n      actions.initHostSocket(user, gameID);\n    } catch (error) {\n      console.error(error.message);\n\n      setError(`Jotain meni pieleen peliä käynnistettäessä: ${error.message}`);\n    }\n\n    return actions.tearDownSocket;\n  }, []);\n\n  const sortPlayersByPoints = (players: SanakiertoPlayer[]) =>\n    players.sort((a, b) => b.points - a.points);\n\n  const jitsiContent = () => {\n    if (error) {\n      return <Loader msg={error} />;\n    }\n\n    if (!jitsiRoom) {\n      return <Loader msg={'Käynnistetään...'} spinner />;\n    }\n\n    return (\n      <JitsiFrame\n        token={jitsiToken}\n        roomName={jitsiRoom}\n        displayName={username}\n        loadedCallback={() => actions.emitJitsiReady(gameID, jitsiRoom)}\n        dev\n      />\n    );\n  };\n\n  const sideBar = () => {\n    if (error) {\n      return null;\n    }\n\n    if (!socket || !activeGame) {\n      return <Loader msg={''} spinner />;\n    }\n\n    if (activeGame.status === GameStatus.WAITING) {\n      return (\n        <WaitingRoom\n          game={activeGame}\n          handleStart={() => actions.startGame(gameID)}\n        />\n      );\n    }\n\n    if (activeGame.status === GameStatus.RUNNING) {\n      // if game has ended, show results\n      if (activeGame.info.round > activeGame.rounds) {\n        return (\n          <Results\n            results={sortPlayersByPoints(activeGame.players)}\n            handleTearDown={() => actions.endGame(gameID)}\n          />\n        );\n      }\n\n      return <HostPanel game={activeGame} />;\n    }\n  };\n\n  if (activeGame?.status === GameStatus.FINISHED) {\n    return <Redirect to={`/${username}`} />;\n  }\n\n  return (\n    <div className={classes.container}>\n      <Paper elevation={5} className={classes.jitsiContainer}>\n        {jitsiContent()}\n      </Paper>\n      <Paper elevation={5} className={classes.hostControls}>\n        {sideBar()}\n      </Paper>\n    </div>\n  );\n};\n\nexport default SanakiertoHostView;\n","import React from 'react';\n\nimport { SanakiertoPlayer } from '../../types';\nimport {\n  TableRow,\n  TableCell,\n  Typography,\n  TableBody,\n  Table,\n} from '@material-ui/core';\n\ninterface ScoresProps {\n  players: SanakiertoPlayer[];\n}\n\nconst Scores: React.FC<ScoresProps> = ({ players }) => {\n  return (\n    <Table>\n      <TableBody>\n        <TableRow>\n          <TableCell>\n            <Typography variant=\"overline\">Pelaaja</Typography>\n          </TableCell>\n          <TableCell align=\"center\">\n            <Typography variant=\"overline\">Pisteet</Typography>\n          </TableCell>\n        </TableRow>\n        {players.map((player) => (\n          <TableRow key={player.id}>\n            <TableCell>{player.name}</TableCell>\n            <TableCell align=\"center\">{player.points}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default Scores;\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { SanakiertoActive } from '../../types';\nimport { Typography } from '@material-ui/core';\n\nimport Scores from './Scores';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({ container: { padding: theme.spacing(2) } })\n);\n\ninterface PlayerSidePanelProps {\n  game: SanakiertoActive;\n}\n\nconst PlayerSidePanel: React.FC<PlayerSidePanelProps> = ({ game }) => {\n  const classes = useStyles();\n\n  const { players, info } = game;\n\n  const playerInTurnIndex = players.findIndex(\n    (player) => player.id === info.turn\n  );\n\n  if (playerInTurnIndex < 0)\n    throw new Error('Something went wrong with player turns');\n\n  const playerWithTurn = players[playerInTurnIndex];\n\n  return (\n    <div>\n      <div className={classes.container}>\n        <Typography variant=\"h6\">{`Kierros ${game.info.round}`}</Typography>\n        <Typography variant=\"overline\" component=\"div\">\n          Vuorossa:\n        </Typography>\n        <Typography component=\"div\" gutterBottom>\n          {playerWithTurn.name}\n        </Typography>\n      </div>\n      <Scores players={game.players} />\n    </div>\n  );\n};\n\nexport default PlayerSidePanel;\n","import React from 'react';\n\nimport { log } from '../../utils/logger';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\n\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { useParams } from 'react-router';\nimport * as actions from '../../services/socketio/actions';\n\nimport Loader from '../Loader';\nimport JitsiFrame from '../JitsiFrame';\nimport { State, BaseUser, GameStatus, SanakiertoPlayer } from '../../types';\nimport WaitingRoom from './WaitingRoom';\nimport PlayerSidePanel from './PlayerSidePanel';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n    },\n    jitsiContainer: {\n      boxSizing: 'border-box',\n      width: '65%',\n      backgroundColor: theme.palette.grey[400],\n\n      height: 568,\n    },\n    sidePanel: {\n      boxSizing: 'border-box',\n      width: '35%',\n      padding: theme.spacing(2),\n      marginLeft: theme.spacing(1),\n\n      height: 568,\n    },\n  })\n);\n\nconst sortPlayersByPoints = (players: SanakiertoPlayer[]) => {\n  return players.sort((a, b) => b.points - a.points);\n};\n\ninterface ParamTypes {\n  username: string;\n  playerId: string;\n}\n\ninterface SanakiertoPlayerViewProps {\n  user: BaseUser;\n}\n\nconst SanakiertoPlayerView: React.FC<SanakiertoPlayerViewProps> = ({\n  user,\n}) => {\n  const classes = useStyles();\n  const { username, playerId } = useParams<ParamTypes>();\n  const activeGame = useSelector(\n    (state: State) => state.games.activeGame,\n    shallowEqual\n  );\n\n  const error = useSelector((state: State) => state.alert);\n\n  React.useEffect(() => {\n    log('initializing socket');\n\n    actions.initPlayerSocket(username, playerId);\n\n    return actions.tearDownSocket;\n  }, []);\n\n  const jitsiContent = () => {\n    if (error) {\n      return <Loader msg={error} />;\n    }\n\n    if (!user.jitsiRoom) {\n      return <Loader msg={'Ladataan...'} />;\n    }\n\n    if (activeGame?.status === GameStatus.FINISHED) {\n      return (\n        <Loader msg={'Kiitos osallistumisesta! Muista antaa palautetta.'} />\n      );\n    }\n\n    return (\n      <JitsiFrame\n        token={null}\n        roomName={user.jitsiRoom}\n        displayName={user.displayName}\n        loadedCallback={() => null}\n        dev\n      />\n    );\n  };\n\n  const sideBar = () => {\n    if (error) {\n      return null;\n    }\n\n    if (!user.socket || !activeGame) {\n      return <Loader msg={'Yhdistetään...'} spinner />;\n    }\n\n    if (activeGame.status === GameStatus.WAITING) {\n      return <WaitingRoom game={activeGame} />;\n    }\n\n    if (activeGame.status === GameStatus.FINISHED) {\n      return <Results results={sortPlayersByPoints(activeGame.players)} />;\n    }\n\n    if (activeGame.status === GameStatus.RUNNING) {\n      if (activeGame.info.round > activeGame.rounds) {\n        return <Results results={sortPlayersByPoints(activeGame.players)} />;\n      }\n\n      return <PlayerSidePanel game={activeGame} />;\n    }\n  };\n\n  return (\n    <div className={classes.container}>\n      <Paper elevation={5} className={classes.jitsiContainer}>\n        {jitsiContent()}\n      </Paper>\n      <Paper elevation={5} className={classes.sidePanel}>\n        {sideBar()}\n      </Paper>\n    </div>\n  );\n};\n\nexport default SanakiertoPlayerView;\n","import React from 'react';\n\nimport { capitalize } from 'lodash';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  Button,\n  Typography,\n  Paper,\n  IconButton,\n  Menu,\n  MenuItem,\n} from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport {\n  SelectableGame,\n  Sanakierto,\n  SanakiertoPlayer,\n  GameStatus,\n} from '../../types';\nimport { useDispatch } from 'react-redux';\nimport { deleteGame } from '../../reducers/games.reducer';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport fiLocale from 'date-fns/locale/fi';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(1),\n      padding: theme.spacing(2),\n    },\n    infoBar: {\n      alignItems: 'center',\n    },\n    flex: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n    editButton: {\n      marginLeft: theme.spacing(1),\n    },\n    playerRow: {},\n    inviteText: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\n/** @TODO invitetext function */\n\nconst getInviteUrl = (hostName: string, playerId: string): string =>\n  `https://www.kotipelit.com/${hostName}/${playerId}`;\n\nconst getInviteText = (\n  game: Sanakierto,\n  hostName: string,\n  player: SanakiertoPlayer\n): string =>\n  `Tervetuloa pelaamaan ${capitalize(game.type)}a!\n  \nSanasi ovat: ${player ? player.words.join(' ') : '<Pelaajan sanat>'}\n      \nTehtävänäsi on miettiä sanoille niitä kuvaavat vihjeet.\n      \nPeli alkaa ${format(new Date(game.startTime), 'd. MMMM HH:mm', {\n    locale: fiLocale,\n  })}.\n      \nNähdään peleillä osoitteessa:\n${getInviteUrl(hostName, player.id)}`;\n\ninterface QueuedGameProps {\n  game: SelectableGame;\n  username: string;\n}\n\nconst QueuedGame: React.FC<QueuedGameProps> = ({ game, username }) => {\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [inviteText, setInviteText] = React.useState<null | string>(null);\n  const dispatch = useDispatch();\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (): void => setAnchorEl(null);\n\n  const handleRemove = (): void => {\n    const agree = window.confirm('Poistetaanko peli?');\n\n    if (agree) dispatch(deleteGame(game.id));\n  };\n\n  const showInviteText = (\n    game: SelectableGame,\n    hostName: string,\n    player: SanakiertoPlayer\n  ): void => {\n    setInviteText(getInviteText(game, hostName, player));\n  };\n\n  const startButton = () => {\n    if (game.status !== GameStatus.FINISHED) {\n      const label = game.status === GameStatus.UPCOMING ? 'Käynnistä' : 'Liity';\n\n      return (\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          component={Link}\n          to={`/${username}/pelit/${game.id}`}\n        >\n          {label}\n        </Button>\n      );\n    }\n  };\n\n  return (\n    <Paper elevation={2} className={classes.container}>\n      <div className={`${classes.infoBar} ${classes.flex}`}>\n        <div>\n          <Typography>\n            {format(new Date(game.startTime), 'd. MMMM HH:mm', {\n              locale: fiLocale,\n            })}\n          </Typography>\n        </div>\n        <div>\n          <Typography>{capitalize(game.type)}</Typography>\n        </div>\n        <div>\n          <Typography>{`${game.players.length} pelaajaa`}</Typography>\n        </div>\n\n        <div>\n          {startButton()}\n          <IconButton\n            size=\"small\"\n            className={classes.editButton}\n            onClick={handleOpen}\n          >\n            <MoreVertIcon />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n            getContentAnchorEl={null}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <MenuItem disabled>\n              <Typography>Muokkaa</Typography>\n            </MenuItem>\n            <MenuItem onClick={handleRemove}>\n              <Typography color=\"secondary\">Poista</Typography>\n            </MenuItem>\n          </Menu>\n        </div>\n      </div>\n      <div>\n        <Typography variant=\"h6\" gutterBottom>\n          Pelaajat\n        </Typography>\n        {game.players.map((player) => (\n          <div\n            key={player.id}\n            className={`${classes.flex} ${classes.playerRow}`}\n          >\n            <Typography component=\"div\">{player.name}</Typography>\n            <Typography component=\"div\">\n              {game.status !== GameStatus.UPCOMING &&\n                `${player.points} pistettä`}\n            </Typography>\n            <Typography component=\"div\">{player.words.join(' / ')}</Typography>\n            <div>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"small\"\n                onClick={() => showInviteText(game, username, player)}\n              >\n                Näytä kutsuteksti\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n      {inviteText && (\n        <div className={classes.inviteText}>\n          <Typography variant=\"h6\" gutterBottom>\n            Kutsuteksti\n          </Typography>\n          <Typography style={{ whiteSpace: 'pre' }}>{inviteText}</Typography>\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default QueuedGame;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Fab, Typography } from '@material-ui/core';\n\nimport QueuedGame from './QueuedGame';\n\nimport { State, LoggedUser, GameStatus } from '../../types';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    marginTop: { marginTop: theme.spacing(2) },\n  })\n);\n\ninterface DashboardProps {\n  user: LoggedUser;\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ user }) => {\n  const classes = useStyles();\n\n  const games = useSelector((state: State) => state.games.allGames);\n\n  const filterGamesByStatus = (label: string, status: GameStatus) => {\n    const filtered = games.filter((game) => game.status === status);\n\n    return filtered.length ? (\n      <>\n        <div>\n          <Typography variant=\"overline\">{label}</Typography>\n        </div>\n        <div>\n          {filtered.map((game) => (\n            <QueuedGame key={game.id} game={game} username={user.username} />\n          ))}\n        </div>\n      </>\n    ) : null;\n  };\n\n  return (\n    <div>\n      {filterGamesByStatus('Käynnissä nyt', GameStatus.RUNNING)}\n      {filterGamesByStatus('Odottaa pelaajia', GameStatus.WAITING)}\n      {filterGamesByStatus('Tulevat pelit', GameStatus.UPCOMING)}\n      {filterGamesByStatus('Menneet pelit', GameStatus.FINISHED)}\n      <div className={classes.marginTop}>\n        <Fab\n          color=\"primary\"\n          variant=\"extended\"\n          component={Link}\n          to={`/${user.username}/newgame`}\n        >\n          UUSI PELI\n        </Fab>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\n\nimport { Paper, Typography, Divider } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport NewGame from './host/NewGame';\nimport SanakiertoHostView from './sanakierto/SanakiertoHostView';\nimport SanakiertoPlayerView from './sanakierto/SanakiertoPlayerView';\nimport Dashboard from './host/Dashboard';\nimport { useSelector } from 'react-redux';\nimport { State, BaseUser } from '../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    marginBottom: {\n      marginBottom: theme.spacing(2),\n    },\n    container: {\n      padding: theme.spacing(3),\n    },\n  })\n);\n\ninterface ChannelPageProps {\n  labelText: string;\n}\n\n/** @TODO guestview */\nconst ChannelPage: React.FC<ChannelPageProps> = ({ labelText }) => {\n  const classes = useStyles();\n\n  const user = useSelector((state: State) => state.user);\n\n  return (\n    <Router>\n      <Paper elevation={5} className={classes.container}>\n        <Typography variant=\"h3\" gutterBottom>\n          {labelText}\n        </Typography>\n        <Divider className={classes.marginBottom} />\n        <Switch>\n          <Route path=\"/:username/newgame\">\n            {user.loggedIn && <NewGame />}\n          </Route>\n          <Route path=\"/:username/pelit/:gameID\">\n            {user.loggedIn && <SanakiertoHostView user={user} />}\n          </Route>\n          <Route path=\"/:username/:playerId\">\n            {!user.loggedIn && <SanakiertoPlayerView user={user as BaseUser} />}\n          </Route>\n          <Route path=\"/\">{user.loggedIn && <Dashboard user={user} />}</Route>\n        </Switch>\n      </Paper>\n    </Router>\n  );\n};\n\nexport default ChannelPage;\n","import React from 'react';\r\n\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nimport {\r\n  Container,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\nimport { checkForUser } from './reducers/user.reducer';\r\nimport { initChannels } from './reducers/channels.reducer';\r\n\r\nimport FrontPage from './components/FrontPage';\r\nimport LoginForm from './components/LoginForm';\r\nimport TempFrontPage from './components/TempFrontPage';\r\nimport UserControls from './components/UserControls';\r\n\r\nimport ChannelPage from './components/ChannelPage';\r\nimport { State, HostChannel } from './types';\r\nimport { initGames } from './reducers/games.reducer';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    navbar: {\r\n      marginBottom: theme.spacing(3),\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n  })\r\n);\r\n\r\n/** @TODO catch 404 */\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector((state: State) => state.user, shallowEqual);\r\n\r\n  const channels = useSelector(\r\n    (state: State) => state.channels.allChannels,\r\n    shallowEqual\r\n  );\r\n\r\n  // init channels and games and check local storage for user\r\n  React.useEffect(() => {\r\n    dispatch(checkForUser());\r\n    dispatch(initGames());\r\n    dispatch(initChannels());\r\n  }, [dispatch]);\r\n\r\n  const channelRoutes = (channels: HostChannel[]) => {\r\n    return channels.map((channel) => (\r\n      <Route key={channel.username} path={`/${channel.username}`}>\r\n        <ChannelPage labelText={channel.channelName} />\r\n      </Route>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <AppBar position=\"static\" className={classes.navbar}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <Button color=\"inherit\" component={Link} to=\"/\">\r\n            <Typography variant=\"h6\">Kotipelit.com</Typography>\r\n          </Button>\r\n          <UserControls user={user} />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container>\r\n        <Switch>\r\n          {channelRoutes(channels)}\r\n          <Route path=\"/kirjaudu\">\r\n            <LoginForm />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <TempFrontPage />\r\n          </Route>\r\n        </Switch>\r\n      </Container>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}