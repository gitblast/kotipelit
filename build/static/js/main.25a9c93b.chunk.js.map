{"version":3,"sources":["utils/logger.ts","types.ts","services/users.ts","services/games.ts","reducers/games.reducer.ts","reducers/user.reducer.ts","reducers/channels.reducer.ts","reducers/index.ts","store/index.ts","components/TempFrontPage.tsx","components/UserControls.tsx","components/host/formHelpers.tsx","components/host/NewGame.tsx","services/socketio/events.ts","services/socketio/callbacks.ts","services/socketio/service.ts","services/socketio/actions.ts","components/sanakierto/ScoreBoard.tsx","hooks/useInterval.ts","components/sanakierto/HostPanel.tsx","components/sanakierto/Results.tsx","components/sanakierto/Scores.tsx","components/sanakierto/PlayerSidePanel.tsx","components/JitsiFrame.tsx","components/sanakierto/WaitingRoom.tsx","components/sanakierto/SanaKierto.tsx","components/host/QueuedGame.tsx","components/host/Dashboard.tsx","components/ChannelPage.tsx","App.tsx","index.tsx"],"names":["log","msg","process","GameType","GameStatus","ActionType","PlayerEvent","HostEvent","CommonEvent","token","login","username","password","a","credentials","axios","post","response","data","setToken","userToken","getAuthHeader","Error","getAll","get","getToken","config","headers","Authorization","userService","addNew","gameToAdd","deleteGame","id","delete","initialState","allGames","activeGame","loading","activate","game","type","SANAKIERTO","status","WAITING","info","turn","round","initSuccess","games","INIT_GAMES_SUCCESS","payload","setActiveGame","SET_ACTIVE_GAME","reducer","state","action","INIT_GAMES_REQUEST","INIT_GAMES_FAILURE","ADD_GAME_REQUEST","ADD_GAME_SUCCESS","concat","ADD_GAME_FAILURE","DELETE_GAME_REQUEST","DELETE_GAME_SUCCESS","filter","DELETE_GAME_FAILURE","gameToActivate","find","activatedGame","map","initialUser","loggedIn","socket","jitsiRoom","displayName","loginSuccess","user","LOGIN_SUCCESS","setJitsiRoom","roomName","SET_JITSI_ROOM","setSocket","SET_SOCKET","LOGIN_REQUEST","loggingIn","jitsiToken","LOGIN_FAILURE","LOGOUT","SET_JITSI_TOKEN","SET_DISPLAYNAME","allChannels","channels","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_REQUEST","INIT_CHANNELS_FAILURE","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","useStyles","makeStyles","theme","createStyles","container","padding","spacing","textAlign","linkContainer","marginTop","FrontPage","classes","useSelector","shallowEqual","className","Typography","variant","channel","key","Button","component","Link","to","channelName","UserControls","dispatch","useDispatch","history","useHistory","color","onClick","window","localStorage","removeItem","push","loggedUser","setItem","JSON","stringify","hardcodedWords","getRandomWord","Math","floor","random","length","initializePlayers","players","usedWords","i","words","randomWord","includes","uuidv4","name","points","online","renderForm","props","handleReturn","handleRefresh","playerToUpdate","wordIndex","newPlayers","values","player","newWords","setValues","gameInfo","FormGroup","row","formRow","marginRight","htmlFor","KeyboardDateTimePicker","autoOk","ampm","format","disablePast","value","startTime","onChange","setFieldValue","FormControl","Select","disabled","MenuItem","render","arrayHelpers","Table","TableHead","TableRow","TableCell","TableBody","index","TextField","word","style","minWidth","IconButton","size","renderTable","buttonRow","Fab","alignItems","display","marginBottom","wordCell","NewGame","goBack","gutterBottom","Divider","utils","DateFnsUtils","locale","fiLocale","initialValues","Date","UPCOMING","rounds","onSubmit","actions","console","gameService","addedGame","joinGame","event","JOIN_GAME","createSuccess","CREATE_SUCCESS","gameReady","GAME_READY","getState","socketService","emit","events","error","message","getTokenForSocket","gameId","playerId","authenticateSocket","callback","on","CONNECT","AUTH_REQUEST","AUTHENTICATED","UNAUTHORIZED","callbacks","attachListeners","isHost","PLAYER_JOINED","currentGame","CREATE_FAILURE","START_SUCCESS","startedGame","START_FAILURE","UPDATE_SUCCESS","UPDATE_FAILURE","JOIN_SUCCESS","JOIN_FAILURE","GAME_STARTING","GAME_UPDATED","eventObj","emitJitsiReady","JITSI_READY","startGame","START_GAME","updateGame","UPDATE_GAME","getAuthCallback","CREATE_ROOM","initPlayerSocket","socketIO","noPaddingX","paddingLeft","paddingRight","saveBtnContainer","additionBox","ScoreBoard","handleUpdate","React","useState","Array","fill","checkBoxes","setCheckboxes","getPointAddition","playerIndex","playerCount","correctAnswers","reduce","sum","next","align","noWrap","addition","valueString","additionElement","Checkbox","checked","newValues","useInterval","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","flex","grow","flexGrow","HostPanel","timerRunning","setTimerRunning","timer","setTimer","playerInTurnIndex","findIndex","playerWithTurn","join","indexOf","newGameState","FINISHED","RUNNING","header","marginLeft","Results","results","Scores","PlayerSidePanel","loader","height","flexDirection","justifyContent","btnContainer","Loader","JitsiFrame","loadedCallback","dev","showJitsi","setShowJitsi","handleAPIloaded","api","dispose","handleLeave","containerStyle","width","undefined","domain","jwt","loadingComponent","onAPILoad","JitsiMeetApi","subject","interfaceConfig","DEFAULT_REMOTE_DISPLAY_NAME","DISABLE_DOMINANT_SPEAKER_INDICATOR","DISABLE_FOCUS_INDICATOR","DISABLE_JOIN_LEAVE_NOTIFICATIONS","DISABLE_PRESENCE_STATUS","DISABLE_RINGING","DISABLE_TRANSCRIPTION_SUBTITLES","DISPLAY_WELCOME_PAGE_CONTENT","DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT","ENABLE_DIAL_OUT","filmStripOnly","GENERATE_ROOMNAMES_ON_WELCOME_PAGE","HIDE_INVITE_MORE_HEADER","SHOW_JITSI_WATERMARK","SHOW_WATERMARK_FOR_GUESTS","RECENT_LIST_ENABLED","startBtn","margin","WaitingRoom","handleStart","p","jitsiContainer","boxSizing","backgroundColor","palette","grey","hostControls","Sanakierto","gameID","useParams","location","useLocation","URLSearchParams","search","getPlayerIDFromQuery","then","authedSocket","catch","Paper","elevation","handleJitsiLoaded","sort","b","sideBar","infoBar","editButton","playerRow","inviteText","getInviteText","hostPath","capitalize","toUTCString","getInviteUrl","QueuedGame","anchorEl","setAnchorEl","pathname","setInviteText","currentTarget","Menu","open","Boolean","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","idToRemove","confirm","handleCopy","whiteSpace","Dashboard","ChannelPage","labelText","userToValidate","loggedInUser","path","navbar","toolbar","App","getItem","parsedUser","parse","AppBar","position","Toolbar","Container","channelRoutes","TempFrontPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.25a9c93b.chunk.js","sourcesContent":["export const log = (msg: unknown): void => {\n  // eslint-disable-next-line no-undef\n  if (process && process.env && process.env.NODE_ENV === 'development')\n    console.log(msg);\n};\n","// JITSI\n\nexport interface JitsiApi {\n  on: (event: string, listener: () => void) => void;\n  dispose: () => void;\n}\n\n// GAMES\n\nexport enum GameType {\n  SANAKIERTO = 'sanakierto',\n}\n\nexport interface Game {\n  id: string;\n  type: GameType;\n  startTime: Date;\n  status: GameStatus;\n}\n\nexport interface SanakiertoPlayer {\n  id: string;\n  name: string;\n  words: string[];\n  points: number;\n  online: boolean;\n}\n\nexport interface Sanakierto extends Game {\n  players: SanakiertoPlayer[];\n  rounds: number;\n}\n\nexport interface SanakiertoActive extends Sanakierto {\n  info: {\n    turn: string; // player id\n    round: number;\n  };\n}\n\nexport type SelectableGame = Sanakierto; // additional games here\n\nexport type ActiveGame = SanakiertoActive; // additional games here\n\nexport enum GameStatus {\n  RUNNING = 'Running',\n  WAITING = 'Waiting for players',\n  UPCOMING = 'Upcoming',\n  FINISHED = 'Finished',\n}\n\n// USERS & AUTH\n\nexport interface BaseUser {\n  loggedIn: false;\n  socket: null | SocketIOClient.Socket;\n  jitsiRoom: null | string;\n  displayName: null | string;\n}\n\nexport interface LoggedUser {\n  username: string;\n  loggedIn: true;\n  token: string;\n  jitsiToken: string | null;\n  socket: null | SocketIOClient.Socket;\n  jitsiRoom: null | string;\n}\n\nexport interface LoggingUser extends BaseUser {\n  loggingIn: true;\n}\n\nexport interface HostChannel {\n  username: string;\n  channelName: string;\n}\n\n// REDUX\n\nexport interface State {\n  games: GamesState;\n  user: User;\n  channels: ChannelsState;\n}\n\nexport interface GamesState {\n  allGames: SelectableGame[];\n  activeGame: ActiveGame | null;\n  loading: boolean;\n}\n\nexport interface ChannelsState {\n  allChannels: HostChannel[];\n  loading: boolean;\n}\n\nexport type User = LoggedUser | LoggingUser | BaseUser;\n\nexport enum ActionType {\n  // GAME ACTIONS\n\n  SET_ACTIVE_GAME = 'SET_ACTIVE_GAME',\n\n  // init games\n  INIT_GAMES_REQUEST = 'INIT_GAMES_REQUEST',\n  INIT_GAMES_SUCCESS = 'INIT_GAMES_SUCCESS',\n  INIT_GAMES_FAILURE = 'INIT_GAMES_FAILURE',\n\n  // add game\n  ADD_GAME_REQUEST = 'ADD_GAME_REQUEST',\n  ADD_GAME_SUCCESS = 'ADD_GAME_SUCCESS',\n  ADD_GAME_FAILURE = 'ADD_GAME_FAILURE',\n\n  // delete game\n  DELETE_GAME_REQUEST = 'DELETE_GAME_REQUEST',\n  DELETE_GAME_SUCCESS = 'DELETE_GAME_SUCCESS',\n  DELETE_GAME_FAILURE = 'DELETE_GAME_FAILURE',\n\n  LAUNCH_GAME = 'LAUNCH_GAME',\n  UPDATE_ACTIVE_GAME = 'UPDATE_ACTIVE_GAME',\n\n  // USER ACTIONS\n\n  // login & logout\n  LOGIN_REQUEST = 'LOGIN_REQUEST',\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\n  LOGIN_FAILURE = 'LOGIN_FAILURE',\n  LOGOUT = 'LOGOUT',\n\n  // user handling\n  SET_JITSI_TOKEN = 'SET_JITSI_TOKEN',\n  SET_JITSI_ROOM = 'SET_JITSI_ROOM',\n  SET_SOCKET = 'SET_SOCKET',\n  SET_DISPLAYNAME = 'SET_DISPLAYNAME',\n\n  // init channels\n  INIT_CHANNELS_REQUEST = 'INIT_CHANNELS_REQUEST',\n  INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS',\n  INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE',\n}\n\nexport type Action =\n  | {\n      type: ActionType.SET_ACTIVE_GAME;\n      payload: ActiveGame;\n    }\n  // INIT GAMES\n  | {\n      type: ActionType.INIT_GAMES_REQUEST;\n    }\n  | {\n      type: ActionType.INIT_GAMES_SUCCESS;\n      payload: SelectableGame[];\n    }\n  | {\n      type: ActionType.INIT_GAMES_FAILURE;\n    }\n\n  // ADD GAME\n  | {\n      type: ActionType.ADD_GAME_REQUEST;\n    }\n  | {\n      type: ActionType.ADD_GAME_SUCCESS;\n      payload: SelectableGame;\n    }\n  | {\n      type: ActionType.ADD_GAME_FAILURE;\n    }\n\n  // DELETE GAME\n  | {\n      type: ActionType.DELETE_GAME_REQUEST;\n    }\n  | {\n      type: ActionType.DELETE_GAME_SUCCESS;\n      payload: string; // game id\n    }\n  | {\n      type: ActionType.DELETE_GAME_FAILURE;\n    }\n\n  // LAUNCH GAME\n  | {\n      type: ActionType.LAUNCH_GAME;\n      payload: string; // game id\n    }\n  | {\n      type: ActionType.UPDATE_ACTIVE_GAME;\n      payload: ActiveGame; // game id\n    }\n\n  // INIT CHANNELS\n  | {\n      type: ActionType.INIT_CHANNELS_REQUEST;\n    }\n  | {\n      type: ActionType.INIT_CHANNELS_SUCCESS;\n      payload: HostChannel[];\n    }\n  | {\n      type: ActionType.INIT_CHANNELS_FAILURE;\n    }\n\n  // LOGIN & USER\n  | {\n      type: ActionType.LOGIN_REQUEST;\n    }\n  | {\n      type: ActionType.LOGIN_SUCCESS;\n      payload: Pick<LoggedUser, 'username' | 'token'>;\n    }\n  | {\n      type: ActionType.LOGIN_FAILURE;\n    }\n  | {\n      type: ActionType.LOGOUT;\n    }\n  | {\n      type: ActionType.SET_JITSI_TOKEN;\n      payload: string; // jitsi token\n    }\n  | {\n      type: ActionType.SET_JITSI_ROOM;\n      payload: string; // jitsi room\n    }\n  | {\n      type: ActionType.SET_SOCKET;\n      payload: SocketIOClient.Socket;\n    }\n  | {\n      type: ActionType.SET_DISPLAYNAME;\n      payload: string;\n    };\n\n// SOCKET IO EVENTS\n\nexport interface CreateSuccessResponse {\n  game: ActiveGame;\n  jitsiToken: string;\n  jitsiRoom: string;\n}\n\nexport interface JoinSuccessResponse {\n  game: ActiveGame;\n  jitsiRoom: string;\n}\n\nexport enum PlayerEvent {\n  JOIN_GAME = 'join game',\n\n  JOIN_SUCCESS = 'join success',\n  JOIN_FAILURE = 'join failure',\n\n  GAME_READY = 'game ready',\n  GAME_STARTING = 'game starting',\n  GAME_UPDATED = 'game updated',\n}\n\nexport enum HostEvent {\n  JITSI_READY = 'jitsi ready',\n  CREATE_ROOM = 'create room',\n  START_GAME = 'start game',\n  UPDATE_GAME = 'update game',\n\n  CREATE_SUCCESS = 'create success',\n  CREATE_FAILURE = 'create failure',\n\n  START_SUCCESS = 'start success',\n  START_FAILURE = 'start failure',\n\n  UPDATE_SUCCESS = 'update success',\n  UPDATE_FAILURE = 'update failure',\n}\n\nexport enum CommonEvent {\n  AUTH_REQUEST = 'authenticate',\n  AUTHENTICATED = 'authenticated',\n  UNAUTHORIZED = 'unauthorized',\n\n  CONNECT = 'connect',\n  PLAYER_JOINED = 'player joined',\n}\n\nexport type EmittedEvent =\n  | {\n      event: PlayerEvent.JOIN_GAME;\n      data: null;\n    }\n  | {\n      event: HostEvent.CREATE_ROOM;\n      data: string; // game id\n    }\n  | {\n      event: HostEvent.JITSI_READY;\n      data: {\n        gameId: string;\n        jitsiRoom: string;\n      };\n    }\n  | {\n      event: HostEvent.START_GAME;\n      data: string; // game id\n    }\n  | {\n      event: HostEvent.UPDATE_GAME;\n      data: ActiveGame; // game id\n    };\n\nexport interface RecievedError {\n  error: string;\n}\n\n// TESTING\n\nexport interface MockSocket {\n  listeners: Record<string, Function>;\n  emitted: Record<string, object>;\n  on: Function;\n  emit: Function;\n}\n","import axios from 'axios';\n\nimport { LoggedUser, HostChannel } from '../types';\n\nconst baseUrl = '/api/users';\nlet token: string | null = null;\n\nconst login = async (\n  username: string,\n  password: string\n): Promise<Pick<LoggedUser, 'username' | 'token'>> => {\n  const credentials = { username, password };\n\n  const response = await axios.post('/api/login', credentials);\n  return response.data;\n};\n\nconst setToken = (userToken: string | null) => {\n  token = userToken;\n};\n\nconst getToken = () => token;\n\nconst getAuthHeader = (): string => {\n  if (!token) throw new Error('Käyttäjän token puuttuu');\n\n  return `Bearer ${token}`;\n};\n\nconst getAll = async (): Promise<HostChannel[]> => {\n  const response = await axios.get(baseUrl);\n  return response.data;\n};\n\nexport default {\n  login,\n  setToken,\n  getAuthHeader,\n  getAll,\n  getToken,\n};\n","import axios from 'axios';\n\nimport userService from './users';\nimport { SelectableGame } from '../types';\n\nconst baseUrl = '/api/games';\n\nconst getAll = async (): Promise<SelectableGame[]> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.get(baseUrl, config);\n\n  return response.data;\n};\n\nconst addNew = async (\n  gameToAdd: Omit<SelectableGame, 'id'>\n): Promise<SelectableGame> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.post(baseUrl, gameToAdd, config);\n\n  return response.data;\n};\n\nconst deleteGame = async (id: string): Promise<void> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  await axios.delete(`${baseUrl}/${id}`, config);\n};\n\nexport default {\n  getAll,\n  addNew,\n  deleteGame,\n};\n","import {\n  GamesState,\n  Action,\n  SelectableGame,\n  GameType,\n  GameStatus,\n  ActiveGame,\n  ActionType,\n} from '../types';\n\nimport { Dispatch, Reducer } from 'redux';\n\nimport gameService from '../services/games';\n\nconst initialState: GamesState = {\n  allGames: [],\n  activeGame: null,\n  loading: false,\n};\n\nconst activate = (game: SelectableGame): ActiveGame => {\n  switch (game.type) {\n    case GameType.SANAKIERTO:\n      return {\n        ...game,\n        status: GameStatus.WAITING,\n        info: {\n          turn: 'TODO',\n          round: 1,\n        },\n      };\n    default: {\n      throw new Error(\n        `Something went wrong, expected a selectable game, got ${game.type}`\n      );\n    }\n  }\n};\n\nconst reducer: Reducer<GamesState, Action> = (\n  state: GamesState = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionType.INIT_GAMES_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case ActionType.INIT_GAMES_SUCCESS: {\n      return {\n        ...state,\n        allGames: action.payload,\n        loading: false,\n      };\n    }\n    case ActionType.INIT_GAMES_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case ActionType.ADD_GAME_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case ActionType.ADD_GAME_SUCCESS: {\n      return {\n        ...state,\n        allGames: state.allGames.concat(action.payload),\n        loading: false,\n      };\n    }\n    case ActionType.ADD_GAME_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case ActionType.DELETE_GAME_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case ActionType.DELETE_GAME_SUCCESS: {\n      return {\n        ...state,\n        allGames: state.allGames.filter((game) => game.id !== action.payload),\n        loading: false,\n      };\n    }\n    case ActionType.DELETE_GAME_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case ActionType.SET_ACTIVE_GAME: {\n      return {\n        ...state,\n        activeGame: action.payload,\n      };\n    }\n    case 'LAUNCH_GAME': {\n      const gameToActivate = state.allGames.find(\n        (game) => game.id === action.payload\n      );\n\n      if (!gameToActivate) throw new Error(`Game not found`);\n\n      const activatedGame = activate(gameToActivate);\n\n      return {\n        ...state,\n        activeGame: activatedGame,\n        allGames: state.allGames.map((game) =>\n          game.id === action.payload\n            ? { ...game, status: GameStatus.WAITING }\n            : game\n        ),\n      };\n    }\n    case 'UPDATE_ACTIVE_GAME': {\n      return {\n        ...state,\n        activeGame: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const initRequest = (): Action => ({\n  type: ActionType.INIT_GAMES_REQUEST,\n});\n\nexport const initSuccess = (games: SelectableGame[]): Action => ({\n  type: ActionType.INIT_GAMES_SUCCESS,\n  payload: games,\n});\n\nexport const initFailure = (): Action => ({\n  type: ActionType.INIT_GAMES_FAILURE,\n});\n\nexport const initGames = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(initRequest());\n\n    try {\n      const games = await gameService.getAll();\n      dispatch(initSuccess(games));\n    } catch (error) {\n      dispatch(initFailure());\n    }\n  };\n};\n\n// add game\n\nexport const addRequest = (): Action => {\n  return { type: ActionType.ADD_GAME_REQUEST };\n};\n\nexport const addSuccess = (gameToAdd: SelectableGame): Action => {\n  return { type: ActionType.ADD_GAME_SUCCESS, payload: gameToAdd };\n};\n\nexport const addFailure = (): Action => {\n  return { type: ActionType.ADD_GAME_FAILURE };\n};\n\nexport const addGame = (game: Omit<SelectableGame, 'id'>) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(addRequest());\n\n    try {\n      const addedGame = await gameService.addNew(game);\n      dispatch(addSuccess(addedGame));\n    } catch (error) {\n      dispatch(addFailure());\n    }\n  };\n};\n\n// delete game\n\nexport const deleteRequest = (): Action => ({\n  type: ActionType.DELETE_GAME_REQUEST,\n});\n\nexport const deleteSuccess = (id: string): Action => ({\n  type: ActionType.DELETE_GAME_SUCCESS,\n  payload: id,\n});\n\nexport const deleteFailure = (): Action => ({\n  type: ActionType.DELETE_GAME_FAILURE,\n});\n\nexport const deleteGame = (idToRemove: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(deleteRequest());\n\n    try {\n      await gameService.deleteGame(idToRemove);\n      dispatch(deleteSuccess(idToRemove));\n    } catch (error) {\n      dispatch(deleteFailure());\n    }\n  };\n};\n\nexport const setActiveGame = (game: ActiveGame): Action => ({\n  type: ActionType.SET_ACTIVE_GAME,\n  payload: game,\n});\n\nexport const launchGame = (id: string): Action => {\n  return {\n    type: ActionType.LAUNCH_GAME,\n    payload: id,\n  };\n};\n\nexport const updateGame = (updatedGame: ActiveGame): Action => {\n  return {\n    type: ActionType.UPDATE_ACTIVE_GAME,\n    payload: updatedGame,\n  };\n};\n\nexport default reducer;\n","import { Dispatch, Reducer } from 'redux';\nimport userService from '../services/users';\n\nimport { Action, User, ActionType, LoggedUser, BaseUser } from '../types';\n\n/** @TODO handle errors */\n\nconst initialUser: BaseUser = {\n  loggedIn: false,\n  socket: null,\n  jitsiRoom: null,\n  displayName: null,\n};\n\nconst reducer: Reducer<User, Action> = (\n  state: User = initialUser,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionType.LOGIN_REQUEST: {\n      return {\n        ...state,\n        loggingIn: true,\n      };\n    }\n    case ActionType.LOGIN_SUCCESS: {\n      return {\n        ...action.payload,\n        loggedIn: true,\n        jitsiToken: null,\n        socket: null,\n        jitsiRoom: null,\n      };\n    }\n    case ActionType.LOGIN_FAILURE: {\n      return {\n        loggedIn: false,\n        socket: null,\n        jitsiRoom: null,\n        displayName: null,\n      };\n    }\n    case ActionType.LOGOUT: {\n      return {\n        loggedIn: false,\n        socket: null,\n        jitsiRoom: null,\n        displayName: null,\n      };\n    }\n    case ActionType.SET_JITSI_TOKEN: {\n      return {\n        ...state,\n        jitsiToken: action.payload,\n      };\n    }\n    case ActionType.SET_JITSI_ROOM: {\n      return {\n        ...state,\n        jitsiRoom: action.payload,\n      };\n    }\n    case ActionType.SET_SOCKET: {\n      return {\n        ...state,\n        socket: action.payload,\n      };\n    }\n    case ActionType.SET_DISPLAYNAME: {\n      return {\n        ...state,\n        displayName: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n/**\n * Checks for a logged user in localStrorage. If found, sets it as user and sets token for userservice\n */\nexport const checkForUser = () => {\n  return (dispatch: Dispatch) => {\n    const loggedUser = window.localStorage.getItem('kotipelitUser');\n\n    if (loggedUser) {\n      const parsedUser: LoggedUser = JSON.parse(loggedUser);\n\n      userService.setToken(parsedUser.token);\n\n      dispatch({\n        type: ActionType.LOGIN_SUCCESS,\n        payload: parsedUser,\n      });\n    }\n  };\n};\n\n/**\n * Clears user from localStorage and sets user to null\n */\nexport const logout = (): Action => {\n  window.localStorage.removeItem('kotipelitUser');\n  return { type: ActionType.LOGOUT };\n};\n\nexport const loginRequest = (): Action => ({\n  type: ActionType.LOGIN_REQUEST,\n});\n\nexport const loginSuccess = (\n  user: Pick<LoggedUser, 'username' | 'token'>\n): Action => ({\n  type: ActionType.LOGIN_SUCCESS,\n  payload: user,\n});\n\nexport const loginFailure = (): Action => ({ type: ActionType.LOGIN_FAILURE });\n\n/**\n * Logs in user. If succesful, sets token to userservice and saves user in localStorage.\n * @param username\n * @param password\n */\nexport const loginUser = (username: string, password: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(loginRequest());\n\n    try {\n      const user = await userService.login(username, password);\n      userService.setToken(user.token);\n\n      const loggedUser = {\n        ...user,\n      };\n\n      window.localStorage.setItem('kotipelitUser', JSON.stringify(loggedUser));\n\n      dispatch(loginSuccess(loggedUser));\n    } catch (error) {\n      dispatch(loginFailure());\n    }\n  };\n};\n\nexport const setJitsiToken = (token: string): Action => ({\n  type: ActionType.SET_JITSI_TOKEN,\n  payload: token,\n});\n\nexport const setJitsiRoom = (roomName: string): Action => ({\n  type: ActionType.SET_JITSI_ROOM,\n  payload: roomName,\n});\n\nexport const setSocket = (socket: SocketIOClient.Socket): Action => ({\n  type: ActionType.SET_SOCKET,\n  payload: socket,\n});\n\nexport const setDisplayName = (name: string): Action => ({\n  type: ActionType.SET_DISPLAYNAME,\n  payload: name,\n});\n\nexport default reducer;\n","import userService from '../services/users';\n\nimport { Action, ActionType, HostChannel, ChannelsState } from '../types';\nimport { Dispatch, Reducer } from 'redux';\n\nconst initialState: ChannelsState = {\n  allChannels: [],\n  loading: false,\n};\n\n/** @TODO handle errors */\n\nconst reducer: Reducer<ChannelsState, Action> = (\n  state: ChannelsState = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case ActionType.INIT_CHANNELS_REQUEST:\n      return { ...state, loading: true };\n    case ActionType.INIT_CHANNELS_SUCCESS:\n      return { allChannels: action.payload, loading: false };\n    case ActionType.INIT_CHANNELS_FAILURE: {\n      return { ...state, loading: false };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const initRequest = (): Action => ({\n  type: ActionType.INIT_CHANNELS_REQUEST,\n});\n\nexport const initSuccess = (channels: HostChannel[]): Action => ({\n  type: ActionType.INIT_CHANNELS_SUCCESS,\n  payload: channels,\n});\nexport const initFailure = (): Action => ({\n  type: ActionType.INIT_CHANNELS_FAILURE,\n});\n\nexport const initChannels = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(initRequest());\n\n    try {\n      const channels = await userService.getAll();\n      dispatch(initSuccess(channels));\n    } catch (error) {\n      dispatch(initFailure());\n    }\n  };\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport games from './games.reducer';\nimport user from './user.reducer';\nimport channels from './channels.reducer';\n\nexport default combineReducers({ games, user, channels });\n","// redux\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Typography, Button } from '@material-ui/core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { State } from '../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: { padding: theme.spacing(2), textAlign: 'center' },\n    linkContainer: { marginTop: theme.spacing(2) },\n  })\n);\n\n// interface FrontPageProps {}\n\nconst FrontPage: React.FC = () => {\n  const classes = useStyles();\n\n  const channels = useSelector(\n    (state: State) => state.channels.allChannels,\n    shallowEqual\n  );\n\n  const mapChannels = () => {\n    return channels.map((channel) => (\n      <div key={channel.username} className={classes.linkContainer}>\n        <Button component={Link} to={`/${channel.username}`} variant=\"outlined\">\n          {channel.channelName}\n        </Button>\n      </div>\n    ));\n  };\n\n  return (\n    <div className={classes.container}>\n      <div>\n        <Typography variant=\"h3\">Kanavat:</Typography>\n      </div>\n      {mapChannels()}\n    </div>\n  );\n};\n\nexport default FrontPage;\n","import * as React from 'react';\n\nimport { loginUser, logout } from '../reducers/user.reducer';\n\nimport { Typography, Button } from '@material-ui/core';\n\nimport { User } from '../types';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\ninterface UserControlsProps {\n  user: User;\n}\n\nconst UserControls: React.FC<UserControlsProps> = ({ user }) => {\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  const handleLogin = () => {\n    dispatch(loginUser('username', 'password'));\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n    history.push('/');\n  };\n\n  if (!user || !user.loggedIn)\n    return (\n      <Button color=\"inherit\" onClick={handleLogin}>\n        <Typography>Kirjaudu</Typography>\n      </Button>\n    );\n\n  return (\n    <Button color=\"inherit\" onClick={handleLogout}>\n      <Typography>{`Kirjaa ulos ${user.username}`}</Typography>\n    </Button>\n  );\n};\n\nexport default UserControls;\n","import React from 'react';\n\nimport {\n  FormGroup,\n  MenuItem,\n  Typography,\n  FormControl,\n  Table,\n  TableHead,\n  TableCell,\n  TableRow,\n  TableBody,\n  IconButton,\n  Fab,\n} from '@material-ui/core';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\n\nimport RefreshIcon from '@material-ui/icons/Refresh';\n\nimport { Form, FastField, FieldArray, FormikProps } from 'formik';\nimport { TextField, Select } from 'formik-material-ui';\n\nimport { SanakiertoPlayer, SelectableGame, GameType } from '../../types';\n\nconst hardcodedWords = [\n  'DIABOLATRY',\n  'FURIOUS',\n  'ARCH',\n  'DRUGSTORE',\n  'DONATION',\n  'HORROR',\n  'SICK',\n  'CARIBOU',\n  'BLIP',\n  'SNAIL',\n  'AIRPORT',\n  'MILKY',\n  'THINGS',\n  'PRAGMATIC',\n  'NASTY',\n  'CURVED',\n  'LIBERATING',\n  'BELT',\n  'GRIZZLY',\n  'BIGMOUTH',\n  'HOROSCOPE',\n  'LIME',\n  'HIGHWAY',\n  'THINGS',\n  'MACHINE',\n  'AGGRESSION',\n  'BARBWIRE',\n  'PROPELLER',\n  'BLEEP',\n  'DEDUCTION',\n];\n\nconst getRandomWord = (): string => {\n  return hardcodedWords[Math.floor(Math.random() * hardcodedWords.length)];\n};\n\n/**\n * Generates initial player objects to be used in state\n * @return {Array} - Array of 5 player objects with 3 unique, randow words each\n */\nexport const initializePlayers = (): SanakiertoPlayer[] => {\n  const players = [];\n  const usedWords: string[] = [];\n\n  for (let i = 1; i <= 5; i++) {\n    const words: string[] = [];\n\n    while (words.length < 3) {\n      const randomWord = getRandomWord();\n      if (!usedWords.includes(randomWord)) {\n        words.push(randomWord);\n        usedWords.push(randomWord);\n      }\n    }\n\n    players.push({\n      id: uuidv4(),\n      name: `Pelaaja ${i}`,\n      words,\n      points: 0,\n      online: false,\n    });\n  }\n\n  return players;\n};\n\n/**\n * Render function for form player table\n * @param players - Form state players\n * @param handleRefresh - Function to refresh a word to a new random word\n */\nconst renderTable = (\n  players: SanakiertoPlayer[],\n  handleRefresh: (player: SanakiertoPlayer, index: number) => void\n) => {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Nimi</TableCell>\n          <TableCell>Sana 1</TableCell>\n          <TableCell>Sana 2</TableCell>\n          <TableCell>Sana 3</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {players.map((player, index) => (\n          <TableRow key={index}>\n            <TableCell>\n              <FastField component={TextField} name={`players.${index}.name`} />\n            </TableCell>\n            {player.words.map((word, index) => (\n              <TableCell key={`${word}${index}`} style={{ minWidth: 190 }}>\n                <span>{word} </span>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleRefresh(player, index)}\n                >\n                  <RefreshIcon />\n                </IconButton>\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\n/**\n * Render function for Formik component\n * @param props - Formik form props\n */\nexport const renderForm = (\n  props: FormikProps<Omit<SelectableGame, 'id'>>,\n  classes: Record<string, string>,\n  handleReturn:\n    | ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)\n    | undefined\n) => {\n  /**\n   * Refreshes the word in the given index of the given player with a new, randow word\n   * @param {SanakiertoPlayer} playerToUpdate - the player whose word will be updated\n   * @param {number} wordIndex - the index of the word to refresh\n   */\n  const handleRefresh = (\n    playerToUpdate: SanakiertoPlayer,\n    wordIndex: number\n  ): void => {\n    const newPlayers = props.values.players.map((player) => {\n      if (player.name === playerToUpdate.name) {\n        const newWords = player.words;\n        newWords[wordIndex] = getRandomWord();\n        return { ...player, words: newWords };\n      }\n\n      return player;\n    });\n\n    props.setValues({\n      ...props.values,\n      players: newPlayers,\n    });\n  };\n\n  return (\n    <Form>\n      <div className={classes.gameInfo}>\n        <FormGroup row className={classes.formRow}>\n          <Typography\n            className={classes.marginRight}\n            component=\"label\"\n            variant=\"h6\"\n            htmlFor=\"startTime\"\n          >\n            Alkamisaika:\n          </Typography>\n          <FastField\n            component={KeyboardDateTimePicker}\n            autoOk\n            ampm={false}\n            format=\"d. MMMM HH:mm\"\n            disablePast\n            name=\"startTime\"\n            value={props.values.startTime}\n            onChange={(value: unknown) =>\n              props.setFieldValue('startTime', value)\n            }\n          />\n        </FormGroup>\n        <FormGroup row className={classes.formRow}>\n          <Typography\n            className={classes.marginRight}\n            component=\"label\"\n            variant=\"h6\"\n            htmlFor=\"type\"\n          >\n            Pelin tyyppi:\n          </Typography>\n          <FormControl variant=\"outlined\">\n            <FastField component={Select} name=\"type\" disabled>\n              <MenuItem value={GameType.SANAKIERTO}>Sanakierto</MenuItem>\n            </FastField>\n          </FormControl>\n        </FormGroup>\n      </div>\n      <div className={classes.gameInfo}>\n        <Typography\n          className={classes.marginRight}\n          component=\"label\"\n          variant=\"h6\"\n          htmlFor=\"players\"\n        >\n          Pelaajat:\n        </Typography>\n      </div>\n      <FieldArray\n        name=\"players\"\n        /**\n         * arrayHelpers can be used to implement adding/removing fields,\n         * see https://jaredpalmer.com/formik/docs/api/fieldarray#fieldarray-helpers\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        render={(arrayHelpers) =>\n          renderTable(props.values.players, handleRefresh)\n        }\n      />\n      <div className={classes.buttonRow}>\n        <Fab\n          variant=\"extended\"\n          color=\"primary\"\n          className={classes.marginRight}\n          type=\"submit\"\n        >\n          Luo peli\n        </Fab>\n        <Fab variant=\"extended\" color=\"secondary\" onClick={handleReturn}>\n          Peruuta\n        </Fab>\n      </div>\n    </Form>\n  );\n};\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { Typography, Divider } from '@material-ui/core';\n\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport fiLocale from 'date-fns/locale/fi';\n\nimport { Formik } from 'formik';\n\nimport { useHistory } from 'react-router-dom';\n\nimport { initializePlayers, renderForm } from './formHelpers';\nimport { useDispatch } from 'react-redux';\nimport { addGame } from '../../reducers/games.reducer';\nimport { GameType, GameStatus } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formRow: {\n      alignItems: 'center',\n      marginRight: theme.spacing(2),\n    },\n    marginRight: {\n      marginRight: theme.spacing(2),\n    },\n    gameInfo: {\n      display: 'flex',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    buttonRow: {\n      marginTop: theme.spacing(2),\n    },\n    wordCell: {\n      minWidth: 190,\n    },\n  })\n);\n\nconst NewGame: React.FC = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  // react router\n  const history = useHistory();\n\n  /**\n   * Redirects back to host main page\n   */\n  const handleReturn = (): void => {\n    history.goBack();\n  };\n\n  /** @TODO id hardcored on submit */\n  /** @TODO validate inputs with Yup */\n\n  return (\n    <div>\n      <Typography variant=\"overline\" gutterBottom>\n        Luo uusi peli\n      </Typography>\n      <Divider />\n      <MuiPickersUtilsProvider utils={DateFnsUtils} locale={fiLocale}>\n        <Formik\n          initialValues={{\n            startTime: new Date(),\n            type: GameType.SANAKIERTO,\n            players: initializePlayers(),\n            status: GameStatus.UPCOMING,\n            rounds: 3,\n          }}\n          onSubmit={(values, actions) => {\n            console.log('values', values, 'actions', actions);\n            console.log('adding new game');\n            dispatch(addGame(values));\n            handleReturn();\n          }}\n        >\n          {(props) => renderForm(props, classes, handleReturn)}\n        </Formik>\n      </MuiPickersUtilsProvider>\n    </div>\n  );\n};\n\nexport default NewGame;\n","import { HostEvent, EmittedEvent, PlayerEvent, ActiveGame } from '../../types';\n\nexport const createRoom = (gameId: string): EmittedEvent => ({\n  event: HostEvent.CREATE_ROOM,\n  data: gameId,\n});\n\nexport const joinGame = (): EmittedEvent => ({\n  event: PlayerEvent.JOIN_GAME,\n  data: null,\n});\n\nexport const jitsiReady = (\n  gameId: string,\n  jitsiRoom: string\n): EmittedEvent => ({\n  event: HostEvent.JITSI_READY,\n  data: { gameId, jitsiRoom },\n});\n\nexport const startGame = (gameId: string): EmittedEvent => ({\n  event: HostEvent.START_GAME,\n  data: gameId,\n});\n\nexport const updateGame = (game: ActiveGame): EmittedEvent => ({\n  event: HostEvent.UPDATE_GAME,\n  data: game,\n});\n","import {\n  CommonEvent,\n  PlayerEvent,\n  HostEvent,\n  RecievedError,\n  CreateSuccessResponse,\n  ActiveGame,\n  State,\n  JoinSuccessResponse,\n} from '../../types';\nimport { log } from '../../utils/logger';\nimport store from '../../store';\nimport { setJitsiToken, setJitsiRoom } from '../../reducers/user.reducer';\nimport { setActiveGame } from '../../reducers/games.reducer';\nimport socketService from './service';\nimport * as events from './events';\n\n/** @TODO handle error on connect */\nexport const connect = (\n  socket: SocketIOClient.Socket,\n  token: string,\n  callback: Function\n) => {\n  return () => {\n    socket\n      .emit(CommonEvent.AUTH_REQUEST, { token })\n      .on(CommonEvent.AUTHENTICATED, () => {\n        log('socketio authorized');\n\n        callback(socket);\n      })\n      .on(CommonEvent.UNAUTHORIZED, (error: { message: string }) => {\n        log('socketio unauthorized');\n\n        throw new Error(error.message);\n      });\n  };\n};\n\nexport const playerJoined = (playerId: string) => {\n  log(`recieved ${CommonEvent.PLAYER_JOINED}`);\n\n  const state: State = store.getState();\n\n  const currentGame = state.games.activeGame;\n\n  if (!currentGame) throw new Error('Player joined but no active game is set');\n\n  const newPlayers = currentGame.players.map((player) => {\n    return player.id === playerId ? { ...player, online: true } : player;\n  });\n\n  store.dispatch(\n    setActiveGame({\n      ...currentGame,\n      players: newPlayers,\n    })\n  );\n};\n\n/** HOST */\n\nexport const createSuccess = (data: CreateSuccessResponse) => {\n  log(`recieved ${HostEvent.CREATE_SUCCESS}, data:`);\n  log(data);\n\n  store.dispatch(setJitsiRoom(data.jitsiRoom));\n  store.dispatch(setActiveGame(data.game));\n  store.dispatch(setJitsiToken(data.jitsiToken));\n};\n\nexport const createFailure = (data: RecievedError) =>\n  log(`recieved ${HostEvent.CREATE_FAILURE}: ${data.error}`);\n\nexport const updateSuccess = (game: ActiveGame) => {\n  log(`recieved ${HostEvent.UPDATE_SUCCESS}, data:`);\n  log(game);\n\n  store.dispatch(setActiveGame(game));\n};\n\nexport const updateFailure = (data: RecievedError) =>\n  log(`recieved ${HostEvent.UPDATE_FAILURE}: ${data.error}`);\n\nexport const startSuccess = (startedGame: ActiveGame) => {\n  log(`recieved ${HostEvent.START_SUCCESS}:`);\n  log(startedGame);\n\n  store.dispatch(setActiveGame(startedGame));\n};\nexport const startFailure = (data: RecievedError) =>\n  log(`recieved ${HostEvent.START_FAILURE}: ${data.error}`);\n\n/** PLAYER */\n\nexport const joinSuccess = (data: JoinSuccessResponse) => {\n  log(`recieved ${PlayerEvent.JOIN_SUCCESS}:`);\n  log(data);\n\n  store.dispatch(setJitsiRoom(data.jitsiRoom));\n  store.dispatch(setActiveGame(data.game));\n};\n\nexport const joinFailure = (data: RecievedError) =>\n  log(`recieved ${PlayerEvent.JOIN_FAILURE}: ${data.error}`);\n\nexport const gameReady = () => {\n  log(`recieved ${PlayerEvent.GAME_READY}`);\n\n  try {\n    const socket = store.getState().user.socket;\n\n    if (!socket) throw new Error('No socket set for user');\n\n    socketService.emit(socket, events.joinGame());\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const gameStarting = (game: ActiveGame) => {\n  log(`recieved ${PlayerEvent.GAME_STARTING}:`);\n  log(game);\n\n  store.dispatch(setActiveGame(game));\n};\n\nexport const gameUpdated = (game: ActiveGame) => {\n  log(`recieved ${PlayerEvent.GAME_UPDATED}:`);\n  log(game);\n\n  store.dispatch(setActiveGame(game));\n};\n","import axios from 'axios';\nimport {\n  CommonEvent,\n  HostEvent,\n  PlayerEvent,\n  EmittedEvent,\n  RecievedError,\n  CreateSuccessResponse,\n  ActiveGame,\n  JoinSuccessResponse,\n} from '../../types';\n\nimport * as callbacks from './callbacks';\nimport { log } from '../../utils/logger';\n\nconst attachListeners = (socket: SocketIOClient.Socket, isHost: boolean) => {\n  // default listeners\n\n  socket.on(CommonEvent.PLAYER_JOINED, (data: string) =>\n    callbacks.playerJoined(data)\n  );\n\n  if (isHost) {\n    // host listeners\n\n    socket.on(HostEvent.CREATE_SUCCESS, (data: CreateSuccessResponse) =>\n      callbacks.createSuccess(data)\n    );\n    socket.on(HostEvent.CREATE_FAILURE, (data: RecievedError) =>\n      callbacks.createFailure(data)\n    );\n\n    socket.on(HostEvent.START_SUCCESS, (game: ActiveGame) => {\n      callbacks.startSuccess(game);\n    });\n    socket.on(HostEvent.START_FAILURE, (data: RecievedError) =>\n      callbacks.startFailure(data)\n    );\n\n    socket.on(HostEvent.UPDATE_SUCCESS, (game: ActiveGame) =>\n      callbacks.updateSuccess(game)\n    );\n    socket.on(HostEvent.UPDATE_FAILURE, (data: RecievedError) =>\n      callbacks.updateFailure(data)\n    );\n  } else {\n    // player listeners\n\n    socket.on(PlayerEvent.JOIN_SUCCESS, (data: JoinSuccessResponse) =>\n      callbacks.joinSuccess(data)\n    );\n    socket.on(PlayerEvent.JOIN_FAILURE, (data: RecievedError) =>\n      callbacks.joinFailure(data)\n    );\n\n    socket.on(PlayerEvent.GAME_READY, callbacks.gameReady);\n\n    socket.on(PlayerEvent.GAME_STARTING, (game: ActiveGame) =>\n      callbacks.gameStarting(game)\n    );\n\n    socket.on(PlayerEvent.GAME_UPDATED, (game: ActiveGame) =>\n      callbacks.gameUpdated(game)\n    );\n  }\n};\n\nconst emit = (socket: SocketIOClient.Socket, eventObj: EmittedEvent): void => {\n  const { event, data } = eventObj;\n\n  log(`Emitting ${event}`);\n\n  if (data) {\n    log('Data:');\n    log(data);\n  }\n\n  socket.emit(event, data);\n};\n\nconst getTokenForSocket = async (\n  gameId: string,\n  playerId: string\n): Promise<{ token: string; displayName: string }> => {\n  const response = await axios.get(`/api/games/${gameId}?pelaaja=${playerId}`);\n  return response.data;\n};\n\nconst authenticateSocket = (\n  socket: SocketIOClient.Socket,\n  token: string,\n  callback: Function\n): SocketIOClient.Socket => {\n  socket.on(CommonEvent.CONNECT, callbacks.connect(socket, token, callback));\n\n  return socket;\n};\n\nexport default {\n  getTokenForSocket,\n  authenticateSocket,\n  attachListeners,\n  emit,\n};\n","import socketIO from 'socket.io-client';\nimport store from '../../store';\nimport { setDisplayName } from '../../reducers/user.reducer';\nimport socketService from './service';\nimport * as events from './events';\nimport { ActiveGame, LoggedUser } from '../../types';\nimport { log } from '../../utils/logger';\n\nexport const emitJitsiReady = (gameId: string, jitsiRoom: string): void => {\n  try {\n    const socket = store.getState().user.socket;\n\n    if (!socket) throw new Error('Socket not set for user');\n\n    socketService.emit(socket, events.jitsiReady(gameId, jitsiRoom));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const startGame = (gameId: string): void => {\n  try {\n    const socket = store.getState().user.socket;\n\n    if (!socket) throw new Error('Socket not set for user');\n\n    socketService.emit(socket, events.startGame(gameId));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const updateGame = (game: ActiveGame) => {\n  try {\n    const socket = store.getState().user.socket;\n\n    if (!socket) throw new Error('Socket not set for user');\n\n    socketService.emit(socket, events.updateGame(game));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const getAuthCallback = (gameId: string | null): Function => {\n  if (gameId) {\n    return (socket: SocketIOClient.Socket) => {\n      socketService.attachListeners(socket, true);\n      socketService.emit(socket, events.createRoom(gameId));\n    };\n  }\n\n  return (socket: SocketIOClient.Socket) => {\n    socketService.attachListeners(socket, false);\n    socketService.emit(socket, events.joinGame());\n  };\n};\n\nexport const initHostSocket = (\n  user: LoggedUser,\n  gameId: string\n): SocketIOClient.Socket => {\n  if (!gameId) throw new Error(`Pelin id puuttuu`);\n\n  return socketService.authenticateSocket(\n    socketIO(),\n    user.token,\n    getAuthCallback(gameId)\n  );\n};\n\nexport const initPlayerSocket = async (\n  gameId: string,\n  playerId: string | null\n): Promise<SocketIOClient.Socket> => {\n  if (!playerId) throw new Error('Pelaajan id puuttuu');\n\n  const data = await socketService.getTokenForSocket(gameId, playerId);\n\n  log(`Setting display name to '${data.displayName}'`);\n  store.dispatch(setDisplayName(data.displayName));\n\n  return socketService.authenticateSocket(\n    socketIO(),\n    data.token,\n    getAuthCallback(null)\n  );\n};\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  Typography,\n  Table,\n  TableRow,\n  TableCell,\n  Fab,\n  Checkbox,\n  TableBody,\n} from '@material-ui/core';\nimport { SanakiertoPlayer } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(2),\n    },\n    noPaddingX: {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    saveBtnContainer: {\n      textAlign: 'center',\n      marginTop: theme.spacing(2),\n    },\n    additionBox: {\n      minWidth: 50,\n    },\n  })\n);\n\ninterface ScoreBoardProps {\n  players: SanakiertoPlayer[];\n  turn: number;\n  handleUpdate: (players: SanakiertoPlayer[]) => void;\n}\n\nconst ScoreBoard: React.FC<ScoreBoardProps> = ({\n  players,\n  turn,\n  handleUpdate,\n}) => {\n  const classes = useStyles();\n  const [checkBoxes, setCheckboxes] = React.useState(\n    new Array(players.length).fill(false)\n  );\n\n  const getPointAddition = (playerIndex: number): number => {\n    const playerCount = players.length;\n    const correctAnswers = checkBoxes.reduce(\n      (sum, next) => (next ? sum + 1 : sum),\n      0\n    );\n\n    switch (correctAnswers) {\n      case playerCount - 1: {\n        return playerIndex === turn ? -50 : 0;\n      }\n      case 0: {\n        return playerIndex === turn ? -50 : 0;\n      }\n      case 1: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 100 : 0;\n      }\n      case 2: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 30 : 0;\n      }\n      case 3: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 10 : 0;\n      }\n    }\n\n    return correctAnswers;\n  };\n\n  const additionElement = (addition: number) => {\n    const valueString = addition > 0 ? `+${addition}` : `${addition}`;\n    let color = '';\n\n    if (addition > 0) color = 'green';\n    if (addition < 0) color = 'red';\n\n    return <span style={{ color }}>{valueString}</span>;\n  };\n\n  const updateGameState = () => {\n    const newPlayers: SanakiertoPlayer[] = players.map((player, index) => {\n      return {\n        ...player,\n        points: player.points + getPointAddition(index),\n      };\n    });\n\n    setCheckboxes(new Array(players.length).fill(false));\n    handleUpdate(newPlayers);\n  };\n\n  return (\n    <div className={classes.container}>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">Pelaaja</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">Pisteet</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">+ / -</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\" noWrap>\n                Vastaus oikein\n              </Typography>\n            </TableCell>\n          </TableRow>\n          {players.map((player, index) => {\n            return (\n              <TableRow key={index}>\n                <TableCell className={classes.noPaddingX} align=\"center\">\n                  <span>{player.name}</span>\n                  {player.online ? null : (\n                    <Typography\n                      variant=\"caption\"\n                      color=\"error\"\n                    >{` (offline)`}</Typography>\n                  )}\n                </TableCell>\n                <TableCell align=\"center\">{player.points}</TableCell>\n                <TableCell\n                  align=\"center\"\n                  className={`${classes.noPaddingX} ${classes.additionBox}`}\n                >\n                  {additionElement(getPointAddition(index))}\n                </TableCell>\n                <TableCell align=\"center\" padding=\"checkbox\">\n                  {index === turn ? (\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Kysyjä\n                    </Typography>\n                  ) : (\n                    <Checkbox\n                      value={checkBoxes[index]}\n                      checked={checkBoxes[index]}\n                      onChange={() => {\n                        const newValues = [...checkBoxes];\n                        newValues[index] = !newValues[index];\n                        setCheckboxes(newValues);\n                      }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <div className={classes.saveBtnContainer}>\n        <Fab variant=\"extended\" color=\"primary\" onClick={updateGameState}>\n          Päivitä pisteet\n        </Fab>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React from 'react';\n\nconst useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = React.useRef<() => void>();\n\n  // Remember the latest callback\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval\n  React.useEffect(() => {\n    const tick = () => {\n      if (!savedCallback || !savedCallback.current)\n        throw new Error('Problem with interval hook');\n      savedCallback.current();\n    };\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Typography, Fab } from '@material-ui/core';\nimport ScoreBoard from './ScoreBoard';\nimport {\n  SanakiertoActive,\n  SanakiertoPlayer,\n  GameStatus,\n  State,\n} from '../../types';\nimport { useSelector } from 'react-redux';\nimport useInterval from '../../hooks/useInterval';\nimport { updateGame } from '../../services/socketio/actions';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: theme.spacing(1),\n    },\n    flex: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    grow: {\n      flexGrow: 1,\n    },\n  })\n);\n\ninterface HostPanelProps {\n  game: SanakiertoActive;\n}\n\nconst HostPanel: React.FC<HostPanelProps> = ({ game }) => {\n  const classes = useStyles();\n  const socket = useSelector((state: State) => state.user.socket);\n\n  const [timerRunning, setTimerRunning] = React.useState<boolean>(false);\n  const [timer, setTimer] = React.useState<number>(90);\n\n  useInterval(\n    () => {\n      setTimer(timer - 1);\n\n      if (timer === 1) {\n        setTimerRunning(false);\n      }\n    },\n    timerRunning ? 1000 : null\n  );\n\n  if (!socket) return <Typography>Yhdistetään...</Typography>;\n\n  const { players, info } = game;\n\n  const playerInTurnIndex = players.findIndex(\n    (player) => player.id === info.turn\n  );\n\n  if (playerInTurnIndex < 0)\n    throw new Error('Something went wrong with player turns');\n\n  const playerWithTurn = players[playerInTurnIndex];\n\n  const handleUpdate = (players: SanakiertoPlayer[]): void => {\n    let round: number;\n    let turn: string;\n\n    if (playerInTurnIndex === players.length - 1) {\n      round = game.info.round + 1;\n      turn = players[0].id;\n    } else {\n      round = game.info.round;\n      turn = players[playerInTurnIndex + 1].id;\n    }\n\n    const newGameState: SanakiertoActive = {\n      ...game,\n      players,\n      info: {\n        round,\n        turn,\n      },\n      status: round > game.rounds ? GameStatus.FINISHED : GameStatus.RUNNING,\n    };\n\n    updateGame(newGameState);\n    if (timerRunning) setTimerRunning(false);\n    setTimer(90);\n  };\n\n  const startTimer = () => {\n    if (timer !== 0) {\n      setTimerRunning(!timerRunning);\n    }\n  };\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h6\">{`Kierros ${game.info.round}`}</Typography>\n      <div className={classes.flex}>\n        <div className={classes.grow}>\n          <Typography\n            variant=\"overline\"\n            component=\"div\"\n            className={classes.grow}\n          >\n            Vuorossa:\n          </Typography>\n          <Typography component=\"div\" gutterBottom>\n            {playerWithTurn.name}\n          </Typography>\n        </div>\n        <div className={classes.grow}>\n          <Typography\n            variant=\"overline\"\n            component=\"div\"\n            className={classes.grow}\n          >\n            Sanat:\n          </Typography>\n          <Typography component=\"div\" gutterBottom>\n            {playerWithTurn.words.join(' / ')}\n          </Typography>\n        </div>\n      </div>\n      <div>\n        <Typography variant=\"overline\" component=\"div\">\n          Vastausaika:\n        </Typography>\n        <div className={classes.flex}>\n          <Typography component=\"div\" className={classes.grow}>\n            {timer !== 0 ? (\n              `${timer} sekuntia`\n            ) : (\n              <Typography color=\"textSecondary\">Aika loppui</Typography>\n            )}\n          </Typography>\n          <div className={classes.grow}>\n            <Fab\n              variant=\"extended\"\n              size=\"small\"\n              color=\"secondary\"\n              onClick={startTimer}\n              disabled={timer === 0}\n            >\n              {timerRunning ? 'Pysäytä' : 'Käynnistä'}\n            </Fab>\n          </div>\n        </div>\n      </div>\n      <ScoreBoard\n        players={game.players}\n        turn={game.players.indexOf(playerWithTurn)}\n        handleUpdate={handleUpdate}\n      />\n    </div>\n  );\n};\n\nexport default HostPanel;\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { SanakiertoPlayer } from '../../types';\nimport {\n  Typography,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: theme.spacing(2),\n    },\n    header: {\n      marginLeft: theme.spacing(2),\n    },\n  })\n);\n\ninterface ResultsProps {\n  results: SanakiertoPlayer[];\n}\n\nconst Results: React.FC<ResultsProps> = ({ results }) => {\n  const classes = useStyles();\n  let placement = 1;\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h4\" gutterBottom className={classes.header}>\n        PELI PÄÄTTYI\n      </Typography>\n      <Table>\n        <TableBody>\n          {results.map((player, index) => {\n            const row = (\n              <TableRow key={player.name}>\n                <TableCell>{/** placement here? */ player.name}</TableCell>\n                <TableCell>{`${player.points} pistettä`}</TableCell>\n              </TableRow>\n            );\n\n            /** handle shared placements */\n            if (\n              index < results.length - 1 &&\n              results[index + 1].points < player.points\n            ) {\n              placement += 1;\n            }\n\n            return row;\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nexport default Results;\n","import React from 'react';\n\nimport { SanakiertoPlayer } from '../../types';\nimport {\n  TableRow,\n  TableCell,\n  Typography,\n  TableBody,\n  Table,\n} from '@material-ui/core';\n\ninterface ScoresProps {\n  players: SanakiertoPlayer[];\n}\n\nconst Scores: React.FC<ScoresProps> = ({ players }) => {\n  return (\n    <Table>\n      <TableBody>\n        <TableRow>\n          <TableCell>\n            <Typography variant=\"overline\">Pelaaja</Typography>\n          </TableCell>\n          <TableCell align=\"center\">\n            <Typography variant=\"overline\">Pisteet</Typography>\n          </TableCell>\n        </TableRow>\n        {players.map((player) => (\n          <TableRow key={player.id}>\n            <TableCell>{player.name}</TableCell>\n            <TableCell align=\"center\">{player.points}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default Scores;\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { SanakiertoActive } from '../../types';\nimport { Typography } from '@material-ui/core';\n\nimport Scores from './Scores';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({ container: { padding: theme.spacing(2) } })\n);\n\ninterface PlayerSidePanelProps {\n  game: SanakiertoActive;\n}\n\nconst PlayerSidePanel: React.FC<PlayerSidePanelProps> = ({ game }) => {\n  const classes = useStyles();\n\n  const { players, info } = game;\n\n  const playerInTurnIndex = players.findIndex(\n    (player) => player.id === info.turn\n  );\n\n  if (playerInTurnIndex < 0)\n    throw new Error('Something went wrong with player turns');\n\n  const playerWithTurn = players[playerInTurnIndex];\n\n  return (\n    <div>\n      <div className={classes.container}>\n        <Typography variant=\"h6\">{`Kierros ${game.info.round}`}</Typography>\n        <Typography variant=\"overline\" component=\"div\">\n          Vuorossa:\n        </Typography>\n        <Typography component=\"div\" gutterBottom>\n          {playerWithTurn.name}\n        </Typography>\n      </div>\n      <Scores players={game.players} />\n    </div>\n  );\n};\n\nexport default PlayerSidePanel;\n","import React from 'react';\nimport Jitsi from 'react-jitsi';\nimport { Fab, Typography } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { ConfigOptions } from 'react-jitsi/dist/types';\nimport { JitsiApi } from '../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    loader: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    btnContainer: { textAlign: 'center', marginBottom: theme.spacing(2) },\n  })\n);\n\nconst Loader: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.loader}>\n      <Typography>Ladataan videoyhteyttä...</Typography>\n    </div>\n  );\n};\n\ninterface JitsiFrameProps {\n  token: string | null;\n  roomName: string;\n  displayName: string | null;\n  loadedCallback: () => void;\n  dev?: boolean;\n}\n\n/** @TODO teardown jitsi? */\n\nconst JitsiFrame: React.FC<JitsiFrameProps> = ({\n  token,\n  roomName,\n  displayName,\n  loadedCallback,\n  dev,\n}) => {\n  const [showJitsi, setShowJitsi] = React.useState<boolean>(!dev);\n\n  const classes = useStyles();\n\n  const handleLeave = (api: JitsiApi) => {\n    setShowJitsi(false);\n    api.dispose();\n  };\n\n  /** attach listeners for jitsi events here. info: https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe */\n  const handleAPIloaded = (api: JitsiApi) => {\n    api.on('videoConferenceLeft', () => handleLeave(api));\n    loadedCallback();\n  };\n\n  if (!showJitsi) {\n    return (\n      <div className={classes.loader}>\n        <div className={classes.btnContainer}>\n          <Fab variant=\"extended\" onClick={() => setShowJitsi(true)}>\n            Käynnistä video\n          </Fab>\n        </div>\n        {token && (\n          <div className={classes.btnContainer}>\n            <Fab variant=\"extended\" onClick={loadedCallback}>\n              Trigger API loaded\n            </Fab>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // https://github.com/jitsi/jitsi-meet/blob/master/config.js\n  const config = {\n    subject: ' ', // hides room name\n  };\n\n  // https://github.com/jitsi/jitsi-meet/blob/master/interface_config.js\n  const interfaceConfig = {\n    DEFAULT_REMOTE_DISPLAY_NAME: 'Pelaaja',\n    DISABLE_DOMINANT_SPEAKER_INDICATOR: true,\n    DISABLE_FOCUS_INDICATOR: true,\n    DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,\n    DISABLE_PRESENCE_STATUS: true,\n    DISABLE_RINGING: true,\n    DISABLE_TRANSCRIPTION_SUBTITLES: true,\n    DISPLAY_WELCOME_PAGE_CONTENT: false,\n    DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: true,\n    ENABLE_DIAL_OUT: false,\n    filmStripOnly: true,\n    GENERATE_ROOMNAMES_ON_WELCOME_PAGE: false,\n    HIDE_INVITE_MORE_HEADER: true,\n    SHOW_JITSI_WATERMARK: false,\n    SHOW_WATERMARK_FOR_GUESTS: false,\n    RECENT_LIST_ENABLED: false,\n  };\n\n  /** @TODO add display name from user */\n  return (\n    <Jitsi\n      containerStyle={{ width: '100%', height: '100%' }}\n      roomName={roomName} // must match room name set in token\n      displayName={displayName ? displayName : undefined}\n      domain=\"meet.kotipelit.com\"\n      jwt={token ? token : undefined} // needs a valid token to auth, see readme\n      loadingComponent={Loader}\n      onAPILoad={(JitsiMeetApi) => handleAPIloaded(JitsiMeetApi as JitsiApi)}\n      config={config as ConfigOptions}\n      interfaceConfig={interfaceConfig}\n    />\n  );\n};\n\nexport default JitsiFrame;\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  TableBody,\n  Table,\n  Fab,\n  TableRow,\n  TableCell,\n  Typography,\n} from '@material-ui/core';\n\nimport { SanakiertoActive } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    startBtn: {\n      textAlign: 'center',\n      margin: theme.spacing(2),\n    },\n  })\n);\n\ninterface WaitingRoomProps {\n  game: SanakiertoActive;\n  handleStart: (() => void) | null;\n}\n\nconst WaitingRoom: React.FC<WaitingRoomProps> = ({ game, handleStart }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      {handleStart && (\n        <div className={classes.startBtn}>\n          <Fab variant=\"extended\" onClick={handleStart}>\n            Aloita peli\n          </Fab>\n        </div>\n      )}\n      <Table>\n        <TableBody>\n          {game.players.map((p) => (\n            <TableRow key={p.id}>\n              <TableCell>{p.name}</TableCell>\n              <TableCell>\n                {p.online ? (\n                  <Typography variant=\"caption\" color=\"primary\">\n                    Paikalla\n                  </Typography>\n                ) : (\n                  <Typography variant=\"caption\" color=\"textSecondary\">\n                    Odotetaan...\n                  </Typography>\n                )}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nexport default WaitingRoom;\n","import React from 'react';\n\nimport { log } from '../../utils/logger';\nimport * as actions from '../../services/socketio/actions';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Paper, Typography } from '@material-ui/core';\n\nimport HostPanel from './HostPanel';\nimport Results from './Results';\nimport PlayerSidePanel from './PlayerSidePanel';\n\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { State, GameStatus, SanakiertoPlayer } from '../../types';\n\nimport { useParams, useLocation } from 'react-router-dom';\nimport JitsiFrame from '../JitsiFrame';\nimport WaitingRoom from './WaitingRoom';\nimport { setSocket } from '../../reducers/user.reducer';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n    },\n    jitsiContainer: {\n      boxSizing: 'border-box',\n      width: '65%',\n      backgroundColor: theme.palette.grey[400],\n    },\n    hostControls: {\n      boxSizing: 'border-box',\n      width: '35%',\n      padding: theme.spacing(2),\n      marginLeft: theme.spacing(1),\n    },\n  })\n);\n\nconst getPlayerIDFromQuery = (location: { search: string }) => {\n  const params = new URLSearchParams(location.search);\n\n  return params.get('pelaaja');\n};\n\n// interface SanakiertoProps {}\n\ninterface ParamTypes {\n  username: string;\n  gameID: string;\n}\n\nconst Sanakierto: React.FC = () => {\n  const classes = useStyles();\n  const activeGame = useSelector((state: State) => state.games.activeGame);\n  const { gameID } = useParams<ParamTypes>();\n  const user = useSelector((state: State) => state.user, shallowEqual);\n  const socket = useSelector((state: State) => state.user.socket);\n  const jitsiRoom = useSelector((state: State) => state.user.jitsiRoom);\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  /** @TODO find out if socket io always uses encrypted connection and manage auth (insecure to send token if not) */\n  React.useEffect(() => {\n    if (!socket) {\n      log('initializing socket');\n\n      if (user.loggedIn) {\n        dispatch(setSocket(actions.initHostSocket(user, gameID)));\n      } else {\n        actions\n          .initPlayerSocket(gameID, getPlayerIDFromQuery(location))\n          .then((authedSocket) => dispatch(setSocket(authedSocket)))\n          .catch((error) => console.error(error.message));\n      }\n    }\n  }, []);\n\n  const handleStartGame = (gameId: string): void => {\n    actions.startGame(gameId);\n  };\n\n  const handleJitsiLoaded = (gameId: string, jitsiRoom: string): void => {\n    actions.emitJitsiReady(gameId, jitsiRoom);\n  };\n\n  const jitsiContent = () => {\n    if (!gameID || !jitsiRoom) {\n      if (user.loggedIn) {\n        return <Typography>Ladataan...</Typography>;\n      }\n\n      return <Typography>Odotetaan, että host käynnistää pelin...</Typography>;\n    }\n\n    return (\n      <JitsiFrame\n        token={user.loggedIn ? user.jitsiToken : null}\n        roomName={jitsiRoom}\n        displayName={user.loggedIn ? user.username : user.displayName}\n        loadedCallback={() => handleJitsiLoaded(gameID, jitsiRoom)}\n        dev\n      />\n    );\n  };\n\n  const sortPlayersByPoints = (players: SanakiertoPlayer[]) => {\n    return players.sort((a, b) => b.points - a.points);\n  };\n\n  const sideBar = () => {\n    if (!socket || !activeGame) return <Typography>Yhdistetään...</Typography>;\n\n    if (activeGame.status === GameStatus.WAITING) {\n      return (\n        <WaitingRoom\n          game={activeGame}\n          handleStart={user.loggedIn ? () => handleStartGame(gameID) : null}\n        />\n      );\n    }\n\n    if (activeGame.status === GameStatus.RUNNING) {\n      return user.loggedIn ? (\n        <HostPanel game={activeGame} />\n      ) : (\n        <PlayerSidePanel game={activeGame} />\n      );\n    }\n\n    return <Results results={sortPlayersByPoints(activeGame.players)} />;\n  };\n\n  return (\n    <div className={classes.container}>\n      <Paper elevation={5} className={classes.jitsiContainer}>\n        {jitsiContent()}\n      </Paper>\n      <Paper elevation={5} className={classes.hostControls}>\n        {sideBar()}\n      </Paper>\n    </div>\n  );\n};\n\nexport default Sanakierto;\n","import React from 'react';\n\nimport { capitalize } from 'lodash';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  Button,\n  Typography,\n  Paper,\n  IconButton,\n  Menu,\n  MenuItem,\n} from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { SelectableGame, Sanakierto, SanakiertoPlayer } from '../../types';\nimport { useDispatch } from 'react-redux';\nimport { deleteGame } from '../../reducers/games.reducer';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(1),\n      padding: theme.spacing(2),\n    },\n    infoBar: {\n      alignItems: 'center',\n    },\n    flex: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n    editButton: {\n      marginLeft: theme.spacing(1),\n    },\n    playerRow: {},\n    inviteText: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\n/** @TODO invitetext function */\n\nconst getInviteUrl = (\n  gameId: string,\n  hostPath: string,\n  playerId: string | undefined\n): string =>\n  `https://www.kotipelit.com${hostPath}/${gameId}?pelaaja=${playerId}`;\n\nconst getInviteText = (\n  game: Sanakierto,\n  hostPath: string,\n  player?: SanakiertoPlayer\n): string =>\n  `Tervetuloa pelaamaan ${capitalize(game.type)}a!\n  \nSanasi ovat: ${player ? player.words.join(' ') : '<Pelaajan sanat>'}\n      \nTehtävänäsi on miettiä sanoille niitä kuvaavat vihjeet.\n      \nPeli alkaa ${new Date(game.startTime).toUTCString()}\n      \nNähdään peleillä osoitteessa:\n${player ? getInviteUrl(game.id, hostPath, player?.id) : '<Pelaajan linkki>'}`;\n\ninterface QueuedGameProps {\n  game: SelectableGame;\n}\n\nconst QueuedGame: React.FC<QueuedGameProps> = ({ game }) => {\n  const classes = useStyles();\n\n  const history = useHistory();\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [inviteText, setInviteText] = React.useState(\n    getInviteText(game, history.location.pathname)\n  );\n  const dispatch = useDispatch();\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (): void => setAnchorEl(null);\n\n  const handleStart = (): void => {\n    history.push(`${history.location.pathname}/${game.id}`);\n  };\n\n  const handleRemove = (): void => {\n    const agree = window.confirm('Poistetaanko peli?');\n\n    if (agree) dispatch(deleteGame(game.id));\n  };\n\n  const handleCopy = (\n    game: SelectableGame,\n    hostPath: string,\n    player: SanakiertoPlayer\n  ): void => {\n    console.log('TODO: copy to clipboard?');\n\n    setInviteText(getInviteText(game, hostPath, player));\n  };\n\n  return (\n    <Paper elevation={2} className={classes.container}>\n      <div className={`${classes.infoBar} ${classes.flex}`}>\n        <div>\n          <Typography>{new Date(game.startTime).toUTCString()}</Typography>\n        </div>\n        <div>\n          <Typography>{capitalize(game.type)}</Typography>\n        </div>\n        <div>\n          <Typography>{`${game.players.length} pelaajaa`}</Typography>\n        </div>\n\n        <div>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleStart}>\n            Käynnistä\n          </Button>\n          <IconButton\n            size=\"small\"\n            className={classes.editButton}\n            onClick={handleOpen}\n          >\n            <MoreVertIcon />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n            getContentAnchorEl={null}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <MenuItem>\n              <Typography>Muokkaa</Typography>\n            </MenuItem>\n            <MenuItem onClick={handleRemove}>\n              <Typography color=\"secondary\">Poista</Typography>\n            </MenuItem>\n          </Menu>\n        </div>\n      </div>\n      <div>\n        <Typography variant=\"h6\" gutterBottom>\n          Pelaajat\n        </Typography>\n        {game.players.map((player) => (\n          <div\n            key={player.id}\n            className={`${classes.flex} ${classes.playerRow}`}\n          >\n            <Typography component=\"div\">{player.name}</Typography>\n            <Typography component=\"div\">{player.words.join(' / ')}</Typography>\n            <div>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() =>\n                  handleCopy(game, history.location.pathname, player)\n                }\n              >\n                Näytä kutsuteksti\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className={classes.inviteText}>\n        <Typography variant=\"h6\" gutterBottom>\n          Kutsuteksti\n        </Typography>\n        <Typography style={{ whiteSpace: 'pre' }}>{inviteText}</Typography>\n      </div>\n    </Paper>\n  );\n};\n\nexport default QueuedGame;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Fab, Typography } from '@material-ui/core';\n\nimport QueuedGame from './QueuedGame';\n\nimport { State, LoggedUser } from '../../types';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    marginTop: { marginTop: theme.spacing(2) },\n  })\n);\n\ninterface DashboardProps {\n  user: LoggedUser;\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ user }) => {\n  const classes = useStyles();\n\n  const games = useSelector((state: State) => state.games.allGames);\n\n  return (\n    <div>\n      <div>\n        <Typography variant=\"overline\">Tulevat pelit:</Typography>\n      </div>\n      <div>\n        {games && games.map((game) => <QueuedGame key={game.id} game={game} />)}\n      </div>\n      <div className={classes.marginTop}>\n        <Fab\n          color=\"primary\"\n          variant=\"extended\"\n          component={Link}\n          to={`/${user.username}/newgame`}\n        >\n          LUO PELI\n        </Fab>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\n\nimport { Paper, Typography, Divider } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { initGames } from '../reducers/games.reducer';\n\nimport NewGame from './host/NewGame';\nimport Sanakierto from './sanakierto/SanaKierto';\nimport Dashboard from './host/Dashboard';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { State, LoggedUser, User } from '../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    marginBottom: {\n      marginBottom: theme.spacing(2),\n    },\n    container: {\n      padding: theme.spacing(3),\n    },\n  })\n);\n\ninterface ChannelPageProps {\n  labelText: string;\n}\n\nconst checkLogIn = (userToValidate: User): LoggedUser | null => {\n  if (userToValidate && userToValidate.loggedIn) return userToValidate;\n\n  return null;\n};\n\n/** @TODO guestview */\nconst ChannelPage: React.FC<ChannelPageProps> = ({ labelText }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  // init games\n  React.useEffect(() => {\n    dispatch(initGames());\n  }, [dispatch]);\n\n  const user = useSelector((state: State) => state.user);\n\n  const loggedInUser = checkLogIn(user);\n\n  return (\n    <Router>\n      <Paper elevation={5} className={classes.container}>\n        <Typography variant=\"h3\" gutterBottom>\n          {labelText}\n        </Typography>\n        <Divider className={classes.marginBottom} />\n        <Switch>\n          <Route path=\"/:username/newgame\">\n            {loggedInUser ? <NewGame /> : null}\n          </Route>\n          <Route path=\"/:username/:gameID\">\n            <Sanakierto />\n          </Route>\n          <Route path=\"/\">\n            {loggedInUser ? <Dashboard user={loggedInUser} /> : null}\n          </Route>\n        </Switch>\n      </Paper>\n    </Router>\n  );\n};\n\nexport default ChannelPage;\n","import React from 'react';\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport {\n  Container,\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n} from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { checkForUser } from './reducers/user.reducer';\nimport { initChannels } from './reducers/channels.reducer';\n\nimport FrontPage from './components/FrontPage';\nimport TempFrontPage from './components/TempFrontPage';\nimport UserControls from './components/UserControls';\n\nimport ChannelPage from './components/ChannelPage';\nimport { State, HostChannel } from './types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    navbar: {\n      marginBottom: theme.spacing(3),\n    },\n    toolbar: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n  })\n);\n\n/** @TODO catch 404 */\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const user = useSelector((state: State) => state.user, shallowEqual);\n\n  const channels = useSelector(\n    (state: State) => state.channels.allChannels,\n    shallowEqual\n  );\n\n  // init channels and check local storage for user\n  React.useEffect(() => {\n    dispatch(checkForUser());\n    dispatch(initChannels());\n  }, [dispatch]);\n\n  const channelRoutes = (channels: HostChannel[]) => {\n    return channels.map((channel) => (\n      <Route key={channel.username} path={`/${channel.username}`}>\n        <ChannelPage labelText={channel.channelName} />\n      </Route>\n    ));\n  };\n\n  return (\n    <Router>\n      <AppBar position=\"static\" className={classes.navbar}>\n        <Toolbar className={classes.toolbar}>\n          <Button color=\"inherit\" component={Link} to=\"/\">\n            <Typography variant=\"h6\">Kotipelit.com</Typography>\n          </Button>\n          <UserControls user={user} />\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Switch>\n          {channelRoutes(channels)}\n          <Route path=\"/\">\n            <TempFrontPage />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}