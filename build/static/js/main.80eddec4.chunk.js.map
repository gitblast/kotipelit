{"version":3,"sources":["types.ts","services/users.ts","services/games.ts","reducers/games.reducer.ts","reducers/user.reducer.ts","reducers/channels.reducer.ts","reducers/index.ts","store/index.ts","components/TempFrontPage.tsx","components/UserControls.tsx","components/channel/host/formHelpers.tsx","components/channel/host/NewGame.tsx","services/socketio.callbacks.ts","services/socketio.ts","services/socketio.events.ts","services/socketio.actions.ts","components/channel/host/sanakierto/ScoreBoard.tsx","hooks/useInterval.ts","components/channel/host/sanakierto/HostPanel.tsx","components/channel/host/sanakierto/Results.tsx","components/JitsiFrame.tsx","components/channel/host/sanakierto/SanaKierto.tsx","components/channel/host/QueuedGame.tsx","components/channel/host/Dashboard.tsx","components/channel/ChannelPage.tsx","App.tsx","index.tsx","utils/logger.ts"],"names":["GameType","GameStatus","ActionType","PlayerEvent","HostEvent","CommonEvent","token","login","username","password","a","credentials","axios","post","response","data","setToken","userToken","getAuthHeader","Error","getAll","get","getToken","config","headers","Authorization","userService","addNew","gameToAdd","deleteGame","id","delete","initialState","allGames","activeGame","loading","activate","game","type","SANAKIERTO","status","WAITING","info","turn","round","initSuccess","games","INIT_GAMES_SUCCESS","payload","setActiveGame","SET_ACTIVE_GAME","reducer","state","action","INIT_GAMES_REQUEST","INIT_GAMES_FAILURE","ADD_GAME_REQUEST","ADD_GAME_SUCCESS","concat","ADD_GAME_FAILURE","DELETE_GAME_REQUEST","DELETE_GAME_SUCCESS","filter","DELETE_GAME_FAILURE","gameToActivate","find","activatedGame","map","initialUser","loggedIn","socket","jitsiRoom","loginRequest","LOGIN_REQUEST","loginSuccess","user","LOGIN_SUCCESS","setJitsiRoom","roomName","SET_JITSI_ROOM","setSocket","SET_SOCKET","jitsiToken","LOGIN_FAILURE","LOGOUT","SET_JITSI_TOKEN","allChannels","channels","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_REQUEST","INIT_CHANNELS_FAILURE","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","useStyles","makeStyles","theme","createStyles","container","padding","spacing","textAlign","linkContainer","marginTop","FrontPage","classes","useSelector","shallowEqual","className","Typography","variant","channel","key","Button","component","Link","to","channelName","UserControls","dispatch","useDispatch","history","useHistory","color","onClick","window","localStorage","removeItem","push","loggedUser","setItem","JSON","stringify","hardcodedWords","getRandomWord","Math","floor","random","length","initializePlayers","players","usedWords","i","words","randomWord","includes","uuidv4","name","points","online","renderForm","props","handleReturn","handleRefresh","playerToUpdate","wordIndex","newPlayers","values","player","newWords","setValues","gameInfo","FormGroup","row","formRow","marginRight","htmlFor","KeyboardDateTimePicker","autoOk","ampm","format","disablePast","value","startTime","onChange","setFieldValue","FormControl","Select","disabled","MenuItem","render","arrayHelpers","Table","TableHead","TableRow","TableCell","TableBody","index","TextField","word","style","minWidth","IconButton","size","renderTable","buttonRow","Fab","alignItems","display","marginBottom","wordCell","NewGame","goBack","gutterBottom","Divider","utils","DateFnsUtils","locale","fiLocale","initialValues","Date","UPCOMING","rounds","onSubmit","actions","console","log","gameService","addedGame","createSuccess","CREATE_SUCCESS","attachListeners","isHost","on","PLAYER_JOINED","playerId","currentGame","getState","callbacks","CREATE_FAILURE","error","START_SUCCESS","startedGame","START_FAILURE","JOIN_SUCCESS","JOIN_FAILURE","GAME_READY","GAME_STARTING","emit","eventObj","event","getTokenForSocket","gameId","authenticateSocket","callback","CONNECT","AUTH_REQUEST","AUTHENTICATED","UNAUTHORIZED","message","initPlayerSocket","JOIN_GAME","socketIO","initHostSocket","CREATE_ROOM","events","emitJitsiReady","JITSI_READY","startGame","START_GAME","noPaddingX","paddingLeft","paddingRight","saveBtnContainer","additionBox","ScoreBoard","handleUpdate","React","useState","Array","fill","checkBoxes","setCheckboxes","getPointAddition","playerIndex","playerCount","correctAnswers","reduce","sum","next","align","noWrap","addition","valueString","additionElement","Checkbox","checked","newValues","useInterval","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","flex","grow","flexGrow","HostPanel","handleStart","timerRunning","setTimerRunning","timer","setTimer","p","playerWithTurn","join","indexOf","currentTurnIndex","header","marginLeft","Results","results","JitsiFrame","handleLoaded","dev","domain","jwt","onAPILoad","jitsiContainer","width","backgroundColor","palette","grey","hostControls","Sanakierto","gameID","useParams","location","useLocation","socketService","URLSearchParams","search","getPlayerIDFromQuery","then","authedSocket","catch","Paper","elevation","handleJitsiLoaded","FINISHED","sort","b","handleStartGame","sideBar","infoBar","justifyContent","editButton","playerRow","inviteText","getInviteText","hostPath","capitalize","toUTCString","getInviteUrl","QueuedGame","currentPath","pathname","anchorEl","setAnchorEl","setInviteText","LAUNCH_GAME","currentTarget","Menu","open","Boolean","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","idToRemove","confirm","handleCopy","whiteSpace","Dashboard","ChannelPage","userToValidate","labelText","loggedInUser","path","navbar","toolbar","App","getItem","parsedUser","parse","AppBar","position","Toolbar","Container","channelRoutes","TempFrontPage","ReactDOM","document","getElementById","msg","process"],"mappings":"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","file":"static/js/main.80eddec4.chunk.js","sourcesContent":["// GAMES\n\nexport enum GameType {\n  SANAKIERTO = 'sanakierto',\n}\n\nexport interface Game {\n  id: string;\n  type: GameType;\n  startTime: Date;\n  status: GameStatus;\n}\n\nexport interface SanakiertoPlayer {\n  id: string;\n  name: string;\n  words: string[];\n  points: number;\n  online: boolean;\n}\n\nexport interface Sanakierto extends Game {\n  players: SanakiertoPlayer[];\n  rounds: number;\n}\n\nexport interface SanakiertoActive extends Sanakierto {\n  info: {\n    turn: string; // player id\n    round: number;\n  };\n}\n\nexport type SelectableGame = Sanakierto; // additional games here\n\nexport type ActiveGame = SanakiertoActive; // additional games here\n\nexport enum GameStatus {\n  RUNNING = 'Running',\n  WAITING = 'Waiting for players',\n  UPCOMING = 'Upcoming',\n  FINISHED = 'Finished',\n}\n\n// USERS & AUTH\n\nexport interface BaseUser {\n  loggedIn: false;\n  socket: null | SocketIOClient.Socket;\n  jitsiRoom: null | string;\n}\n\nexport interface LoggedUser {\n  username: string;\n  loggedIn: true;\n  token: string;\n  jitsiToken: string | null;\n  socket: null | SocketIOClient.Socket;\n  jitsiRoom: null | string;\n}\n\nexport interface LoggingUser extends BaseUser {\n  username: string;\n}\n\nexport interface HostChannel {\n  username: string;\n  channelName: string;\n}\n\n// REDUX\n\nexport interface State {\n  games: GamesState;\n  user: User;\n  channels: ChannelsState;\n}\n\nexport interface GamesState {\n  allGames: SelectableGame[];\n  activeGame: ActiveGame | null;\n  loading: boolean;\n}\n\nexport interface ChannelsState {\n  allChannels: HostChannel[];\n  loading: boolean;\n}\n\nexport type User = LoggedUser | LoggingUser | BaseUser;\n\nexport enum ActionType {\n  // GAME ACTIONS\n\n  SET_ACTIVE_GAME = 'SET_ACTIVE_GAME',\n\n  // init games\n  INIT_GAMES_REQUEST = 'INIT_GAMES_REQUEST',\n  INIT_GAMES_SUCCESS = 'INIT_GAMES_SUCCESS',\n  INIT_GAMES_FAILURE = 'INIT_GAMES_FAILURE',\n\n  // add game\n  ADD_GAME_REQUEST = 'ADD_GAME_REQUEST',\n  ADD_GAME_SUCCESS = 'ADD_GAME_SUCCESS',\n  ADD_GAME_FAILURE = 'ADD_GAME_FAILURE',\n\n  // delete game\n  DELETE_GAME_REQUEST = 'DELETE_GAME_REQUEST',\n  DELETE_GAME_SUCCESS = 'DELETE_GAME_SUCCESS',\n  DELETE_GAME_FAILURE = 'DELETE_GAME_FAILURE',\n\n  LAUNCH_GAME = 'LAUNCH_GAME',\n  UPDATE_ACTIVE_GAME = 'UPDATE_ACTIVE_GAME',\n\n  // USER ACTIONS\n\n  // login & logout\n  LOGIN_REQUEST = 'LOGIN_REQUEST',\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\n  LOGIN_FAILURE = 'LOGIN_FAILURE',\n  LOGOUT = 'LOGOUT',\n\n  // user handling\n  SET_JITSI_TOKEN = 'SET_JITSI_TOKEN',\n  SET_JITSI_ROOM = 'SET_JITSI_ROOM',\n  SET_SOCKET = 'SET_SOCKET',\n\n  // init channels\n  INIT_CHANNELS_REQUEST = 'INIT_CHANNELS_REQUEST',\n  INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS',\n  INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE',\n}\n\nexport type Action =\n  | {\n      type: ActionType.SET_ACTIVE_GAME;\n      payload: ActiveGame;\n    }\n  // INIT GAMES\n  | {\n      type: ActionType.INIT_GAMES_REQUEST;\n    }\n  | {\n      type: ActionType.INIT_GAMES_SUCCESS;\n      payload: SelectableGame[];\n    }\n  | {\n      type: ActionType.INIT_GAMES_FAILURE;\n    }\n\n  // ADD GAME\n  | {\n      type: ActionType.ADD_GAME_REQUEST;\n    }\n  | {\n      type: ActionType.ADD_GAME_SUCCESS;\n      payload: SelectableGame;\n    }\n  | {\n      type: ActionType.ADD_GAME_FAILURE;\n    }\n\n  // DELETE GAME\n  | {\n      type: ActionType.DELETE_GAME_REQUEST;\n    }\n  | {\n      type: ActionType.DELETE_GAME_SUCCESS;\n      payload: string; // game id\n    }\n  | {\n      type: ActionType.DELETE_GAME_FAILURE;\n    }\n\n  // LAUNCH GAME\n  | {\n      type: ActionType.LAUNCH_GAME;\n      payload: string; // game id\n    }\n  | {\n      type: ActionType.UPDATE_ACTIVE_GAME;\n      payload: ActiveGame; // game id\n    }\n\n  // INIT CHANNELS\n  | {\n      type: ActionType.INIT_CHANNELS_REQUEST;\n    }\n  | {\n      type: ActionType.INIT_CHANNELS_SUCCESS;\n      payload: HostChannel[];\n    }\n  | {\n      type: ActionType.INIT_CHANNELS_FAILURE;\n    }\n\n  // LOGIN & USER\n  | {\n      type: ActionType.LOGIN_REQUEST;\n      payload: string; // username\n    }\n  | {\n      type: ActionType.LOGIN_SUCCESS;\n      payload: Pick<LoggedUser, 'username' | 'token'>;\n    }\n  | {\n      type: ActionType.LOGIN_FAILURE;\n    }\n  | {\n      type: ActionType.LOGOUT;\n    }\n  | {\n      type: ActionType.SET_JITSI_TOKEN;\n      payload: string; // jitsi token\n    }\n  | {\n      type: ActionType.SET_JITSI_ROOM;\n      payload: string; // jitsi room\n    }\n  | {\n      type: ActionType.SET_SOCKET;\n      payload: SocketIOClient.Socket;\n    };\n\n// SOCKET IO EVENTS\n\nexport interface CreateSuccessResponse {\n  game: ActiveGame;\n  jitsiToken: string;\n}\n\nexport interface JoinSuccessResponse {\n  game: ActiveGame;\n  jitsiRoom: string;\n}\n\nexport enum PlayerEvent {\n  JOIN_GAME = 'join game',\n\n  JOIN_SUCCESS = 'join success',\n  JOIN_FAILURE = 'join failure',\n\n  GAME_READY = 'game ready',\n  GAME_STARTING = 'game starting',\n}\n\nexport enum HostEvent {\n  JITSI_READY = 'jitsi ready',\n  CREATE_ROOM = 'create room',\n  START_GAME = 'start game',\n  UPDATE_GAME = 'update game',\n\n  CREATE_SUCCESS = 'create success',\n  CREATE_FAILURE = 'create failure',\n\n  START_SUCCESS = 'start success',\n  START_FAILURE = 'start failure',\n}\n\nexport enum CommonEvent {\n  AUTH_REQUEST = 'authenticate',\n  AUTHENTICATED = 'authenticated',\n  UNAUTHORIZED = 'unauthorized',\n\n  CONNECT = 'connect',\n  PLAYER_JOINED = 'player joined',\n}\n\nexport type EmittedEvent =\n  | {\n      event: PlayerEvent.JOIN_GAME;\n      data: null;\n    }\n  | {\n      event: HostEvent.CREATE_ROOM;\n      data: string; // game id\n    }\n  | {\n      event: HostEvent.JITSI_READY;\n      data: {\n        gameId: string;\n        jitsiRoom: string;\n      };\n    }\n  | {\n      event: HostEvent.START_GAME;\n      data: string; // game id\n    }\n  | {\n      event: HostEvent.UPDATE_GAME;\n      data: ActiveGame; // game id\n    };\n\nexport interface RecievedError {\n  error: string;\n}\n\n// TESTING\n\nexport interface MockSocket {\n  listeners: Record<string, Function>;\n  emitted: Record<string, object>;\n  on: Function;\n  emit: Function;\n}\n","import axios from 'axios';\n\nimport { LoggedUser, HostChannel } from '../types';\n\nconst baseUrl = '/api/users';\nlet token: string | null = null;\n\nconst login = async (\n  username: string,\n  password: string\n): Promise<Pick<LoggedUser, 'username' | 'token'>> => {\n  const credentials = { username, password };\n\n  const response = await axios.post('/api/login', credentials);\n  return response.data;\n};\n\nconst setToken = (userToken: string | null) => {\n  token = userToken;\n};\n\nconst getToken = () => token;\n\nconst getAuthHeader = (): string => {\n  if (!token) throw new Error('Käyttäjän token puuttuu');\n\n  return `Bearer ${token}`;\n};\n\nconst getAll = async (): Promise<HostChannel[]> => {\n  const response = await axios.get(baseUrl);\n  return response.data;\n};\n\nexport default {\n  login,\n  setToken,\n  getAuthHeader,\n  getAll,\n  getToken,\n};\n","import axios from 'axios';\n\nimport userService from './users';\nimport { SelectableGame } from '../types';\n\nconst baseUrl = '/api/games';\n\nconst getAll = async (): Promise<SelectableGame[]> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.get(baseUrl, config);\n\n  return response.data;\n};\n\nconst addNew = async (\n  gameToAdd: Omit<SelectableGame, 'id'>\n): Promise<SelectableGame> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  const response = await axios.post(baseUrl, gameToAdd, config);\n\n  return response.data;\n};\n\nconst deleteGame = async (id: string): Promise<void> => {\n  const config = {\n    headers: { Authorization: userService.getAuthHeader() },\n  };\n\n  await axios.delete(`${baseUrl}/${id}`, config);\n};\n\nexport default {\n  getAll,\n  addNew,\n  deleteGame,\n};\n","import {\n  GamesState,\n  Action,\n  SelectableGame,\n  GameType,\n  GameStatus,\n  ActiveGame,\n  ActionType,\n} from '../types';\n\nimport { Dispatch } from 'redux';\n\nimport gameService from '../services/games';\n\nconst initialState: GamesState = {\n  allGames: [],\n  activeGame: null,\n  loading: false,\n};\n\nconst activate = (game: SelectableGame): ActiveGame => {\n  switch (game.type) {\n    case GameType.SANAKIERTO:\n      return {\n        ...game,\n        status: GameStatus.WAITING,\n        info: {\n          turn: 'TODO',\n          round: 1,\n        },\n      };\n    default: {\n      throw new Error(\n        `Something went wrong, expected a selectable game, got ${game.type}`\n      );\n    }\n  }\n};\n\nconst reducer = (state: GamesState = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.INIT_GAMES_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case ActionType.INIT_GAMES_SUCCESS: {\n      return {\n        ...state,\n        allGames: action.payload,\n        loading: false,\n      };\n    }\n    case ActionType.INIT_GAMES_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case ActionType.ADD_GAME_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case ActionType.ADD_GAME_SUCCESS: {\n      return {\n        ...state,\n        allGames: state.allGames.concat(action.payload),\n        loading: false,\n      };\n    }\n    case ActionType.ADD_GAME_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case ActionType.DELETE_GAME_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case ActionType.DELETE_GAME_SUCCESS: {\n      return {\n        ...state,\n        allGames: state.allGames.filter((game) => game.id !== action.payload),\n        loading: false,\n      };\n    }\n    case ActionType.DELETE_GAME_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case ActionType.SET_ACTIVE_GAME: {\n      return {\n        ...state,\n        activeGame: action.payload,\n      };\n    }\n    case 'LAUNCH_GAME': {\n      const gameToActivate = state.allGames.find(\n        (game) => game.id === action.payload\n      );\n\n      if (!gameToActivate) throw new Error(`Game not found`);\n\n      const activatedGame = activate(gameToActivate);\n\n      return {\n        activeGame: activatedGame,\n        allGames: state.allGames.map((game) =>\n          game.id === action.payload\n            ? { ...game, status: GameStatus.WAITING }\n            : game\n        ),\n      };\n    }\n    case 'UPDATE_ACTIVE_GAME': {\n      return {\n        ...state,\n        activeGame: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const initRequest = (): Action => ({\n  type: ActionType.INIT_GAMES_REQUEST,\n});\n\nexport const initSuccess = (games: SelectableGame[]): Action => ({\n  type: ActionType.INIT_GAMES_SUCCESS,\n  payload: games,\n});\n\nexport const initFailure = (): Action => ({\n  type: ActionType.INIT_GAMES_FAILURE,\n});\n\nexport const initGames = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(initRequest());\n\n    try {\n      const games = await gameService.getAll();\n      dispatch(initSuccess(games));\n    } catch (error) {\n      dispatch(initFailure());\n    }\n  };\n};\n\n// add game\n\nexport const addRequest = (): Action => {\n  return { type: ActionType.ADD_GAME_REQUEST };\n};\n\nexport const addSuccess = (gameToAdd: SelectableGame): Action => {\n  return { type: ActionType.ADD_GAME_SUCCESS, payload: gameToAdd };\n};\n\nexport const addFailure = (): Action => {\n  return { type: ActionType.ADD_GAME_FAILURE };\n};\n\nexport const addGame = (game: Omit<SelectableGame, 'id'>) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(addRequest());\n\n    try {\n      const addedGame = await gameService.addNew(game);\n      dispatch(addSuccess(addedGame));\n    } catch (error) {\n      dispatch(addFailure());\n    }\n  };\n};\n\n// delete game\n\nexport const deleteRequest = (): Action => ({\n  type: ActionType.DELETE_GAME_REQUEST,\n});\n\nexport const deleteSuccess = (id: string): Action => ({\n  type: ActionType.DELETE_GAME_SUCCESS,\n  payload: id,\n});\n\nexport const deleteFailure = (): Action => ({\n  type: ActionType.DELETE_GAME_FAILURE,\n});\n\nexport const deleteGame = (idToRemove: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(deleteRequest());\n\n    try {\n      await gameService.deleteGame(idToRemove);\n      dispatch(deleteSuccess(idToRemove));\n    } catch (error) {\n      dispatch(deleteFailure());\n    }\n  };\n};\n\nexport const setActiveGame = (game: ActiveGame): Action => ({\n  type: ActionType.SET_ACTIVE_GAME,\n  payload: game,\n});\n\nexport const launchGame = (id: string): Action => {\n  return {\n    type: ActionType.LAUNCH_GAME,\n    payload: id,\n  };\n};\n\nexport const updateGame = (updatedGame: ActiveGame): Action => {\n  return {\n    type: ActionType.UPDATE_ACTIVE_GAME,\n    payload: updatedGame,\n  };\n};\n\nexport default reducer;\n","import { Dispatch } from 'redux';\nimport userService from '../services/users';\n\nimport { Action, User, ActionType, LoggedUser, BaseUser } from '../types';\n\n/** @TODO handle errors */\n\nconst initialUser: BaseUser = {\n  loggedIn: false,\n  socket: null,\n  jitsiRoom: null,\n};\n\nconst reducer = (state: User = initialUser, action: Action) => {\n  switch (action.type) {\n    case ActionType.LOGIN_REQUEST: {\n      return {\n        username: action.payload,\n        loggedIn: false,\n      };\n    }\n    case ActionType.LOGIN_SUCCESS: {\n      return {\n        ...action.payload,\n        loggedIn: true,\n        jitsiToken: null,\n        socket: null,\n        jitsiRoom: null,\n      };\n    }\n    case ActionType.LOGIN_FAILURE: {\n      return { loggedIn: false, socket: null, jitsiRoom: null };\n    }\n    case ActionType.LOGOUT: {\n      return { loggedIn: false, socket: null, jitsiRoom: null };\n    }\n    case ActionType.SET_JITSI_TOKEN: {\n      return {\n        ...state,\n        jitsiToken: action.payload,\n      };\n    }\n    case ActionType.SET_JITSI_ROOM: {\n      return {\n        ...state,\n        jitsiRoom: action.payload,\n      };\n    }\n    case ActionType.SET_SOCKET: {\n      return {\n        ...state,\n        socket: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n/**\n * Checks for a logged user in localStrorage. If found, sets it as user and sets token for userservice\n */\nexport const checkForUser = () => {\n  return (dispatch: Dispatch) => {\n    const loggedUser = window.localStorage.getItem('kotipelitUser');\n\n    if (loggedUser) {\n      const parsedUser: LoggedUser = JSON.parse(loggedUser);\n\n      userService.setToken(parsedUser.token);\n\n      dispatch({\n        type: ActionType.LOGIN_SUCCESS,\n        payload: parsedUser,\n      });\n    }\n  };\n};\n\n/**\n * Clears user from localStorage and sets user to null\n */\nexport const logout = (): Action => {\n  window.localStorage.removeItem('kotipelitUser');\n  return { type: ActionType.LOGOUT };\n};\n\nexport const loginRequest = (username: string): Action => ({\n  type: ActionType.LOGIN_REQUEST,\n  payload: username,\n});\n\nexport const loginSuccess = (\n  user: Pick<LoggedUser, 'username' | 'token'>\n): Action => ({\n  type: ActionType.LOGIN_SUCCESS,\n  payload: user,\n});\n\nexport const loginFailure = (): Action => ({ type: ActionType.LOGIN_FAILURE });\n\n/**\n * Logs in user. If succesful, sets token to userservice and saves user in localStorage.\n * @param username\n * @param password\n */\nexport const loginUser = (username: string, password: string) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(loginRequest(username));\n\n    try {\n      const user = await userService.login(username, password);\n      userService.setToken(user.token);\n\n      const loggedUser = {\n        ...user,\n      };\n\n      window.localStorage.setItem('kotipelitUser', JSON.stringify(loggedUser));\n\n      dispatch(loginSuccess(loggedUser));\n    } catch (error) {\n      dispatch(loginFailure());\n    }\n  };\n};\n\nexport const setJitsiToken = (token: string): Action => ({\n  type: ActionType.SET_JITSI_TOKEN,\n  payload: token,\n});\n\nexport const setJitsiRoom = (roomName: string): Action => ({\n  type: ActionType.SET_JITSI_ROOM,\n  payload: roomName,\n});\n\nexport const setSocket = (socket: SocketIOClient.Socket): Action => ({\n  type: ActionType.SET_SOCKET,\n  payload: socket,\n});\n\nexport default reducer;\n","import userService from '../services/users';\n\nimport { Action, ActionType, HostChannel, ChannelsState } from '../types';\nimport { Dispatch } from 'redux';\n\nconst initialState: ChannelsState = {\n  allChannels: [],\n  loading: false,\n};\n\n/** @TODO handle errors */\n\nconst reducer = (state: ChannelsState = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.INIT_CHANNELS_REQUEST:\n      return { ...state, loading: true };\n    case ActionType.INIT_CHANNELS_SUCCESS:\n      return { allChannels: action.payload, loading: false };\n    case ActionType.INIT_CHANNELS_FAILURE: {\n      return { ...state, loading: false };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const initRequest = (): Action => ({\n  type: ActionType.INIT_CHANNELS_REQUEST,\n});\n\nexport const initSuccess = (channels: HostChannel[]): Action => ({\n  type: ActionType.INIT_CHANNELS_SUCCESS,\n  payload: channels,\n});\nexport const initFailure = (): Action => ({\n  type: ActionType.INIT_CHANNELS_FAILURE,\n});\n\nexport const initChannels = () => {\n  return async (dispatch: Dispatch) => {\n    dispatch(initRequest());\n\n    try {\n      const channels = await userService.getAll();\n      dispatch(initSuccess(channels));\n    } catch (error) {\n      dispatch(initFailure());\n    }\n  };\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport games from './games.reducer';\nimport user from './user.reducer';\nimport channels from './channels.reducer';\n\nexport default combineReducers({ games, user, channels });\n","// redux\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Typography, Button } from '@material-ui/core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { State } from '../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: { padding: theme.spacing(2), textAlign: 'center' },\n    linkContainer: { marginTop: theme.spacing(2) },\n  })\n);\n\n// interface FrontPageProps {}\n\nconst FrontPage: React.FC = () => {\n  const classes = useStyles();\n\n  const channels = useSelector(\n    (state: State) => state.channels.allChannels,\n    shallowEqual\n  );\n\n  const mapChannels = () => {\n    return channels.map((channel) => (\n      <div key={channel.username} className={classes.linkContainer}>\n        <Button component={Link} to={`/${channel.username}`} variant=\"outlined\">\n          {channel.channelName}\n        </Button>\n      </div>\n    ));\n  };\n\n  return (\n    <div className={classes.container}>\n      <div>\n        <Typography variant=\"h3\">Kanavat:</Typography>\n      </div>\n      {mapChannels()}\n    </div>\n  );\n};\n\nexport default FrontPage;\n","import * as React from 'react';\n\nimport { loginUser, logout } from '../reducers/user.reducer';\n\nimport { Typography, Button } from '@material-ui/core';\n\nimport { User } from '../types';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\ninterface UserControlsProps {\n  user: User;\n}\n\nconst UserControls: React.FC<UserControlsProps> = ({ user }) => {\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  const handleLogin = () => {\n    dispatch(loginUser('username', 'password'));\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n    history.push('/');\n  };\n\n  if (!user || !user.loggedIn)\n    return (\n      <Button color=\"inherit\" onClick={handleLogin}>\n        <Typography>Kirjaudu</Typography>\n      </Button>\n    );\n\n  return (\n    <Button color=\"inherit\" onClick={handleLogout}>\n      <Typography>{`Kirjaa ulos ${user.username}`}</Typography>\n    </Button>\n  );\n};\n\nexport default UserControls;\n","import React from 'react';\n\nimport {\n  FormGroup,\n  MenuItem,\n  Typography,\n  FormControl,\n  Table,\n  TableHead,\n  TableCell,\n  TableRow,\n  TableBody,\n  IconButton,\n  Fab,\n} from '@material-ui/core';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { KeyboardDateTimePicker } from '@material-ui/pickers';\n\nimport RefreshIcon from '@material-ui/icons/Refresh';\n\nimport { Form, FastField, FieldArray, FormikProps } from 'formik';\nimport { TextField, Select } from 'formik-material-ui';\n\nimport { SanakiertoPlayer, SelectableGame, GameType } from '../../../types';\n\nconst hardcodedWords = [\n  'DIABOLATRY',\n  'FURIOUS',\n  'ARCH',\n  'DRUGSTORE',\n  'DONATION',\n  'HORROR',\n  'SICK',\n  'CARIBOU',\n  'BLIP',\n  'SNAIL',\n  'AIRPORT',\n  'MILKY',\n  'THINGS',\n  'PRAGMATIC',\n  'NASTY',\n  'CURVED',\n  'LIBERATING',\n  'BELT',\n  'GRIZZLY',\n  'BIGMOUTH',\n  'HOROSCOPE',\n  'LIME',\n  'HIGHWAY',\n  'THINGS',\n  'MACHINE',\n  'AGGRESSION',\n  'BARBWIRE',\n  'PROPELLER',\n  'BLEEP',\n  'DEDUCTION',\n];\n\nconst getRandomWord = (): string => {\n  return hardcodedWords[Math.floor(Math.random() * hardcodedWords.length)];\n};\n\n/**\n * Generates initial player objects to be used in state\n * @return {Array} - Array of 5 player objects with 3 unique, randow words each\n */\nexport const initializePlayers = (): SanakiertoPlayer[] => {\n  const players = [];\n  const usedWords: string[] = [];\n\n  for (let i = 1; i <= 5; i++) {\n    const words: string[] = [];\n\n    while (words.length < 3) {\n      const randomWord = getRandomWord();\n      if (!usedWords.includes(randomWord)) {\n        words.push(randomWord);\n        usedWords.push(randomWord);\n      }\n    }\n\n    players.push({\n      id: uuidv4(),\n      name: `Pelaaja ${i}`,\n      words,\n      points: 0,\n      online: false,\n    });\n  }\n\n  return players;\n};\n\n/**\n * Render function for form player table\n * @param players - Form state players\n * @param handleRefresh - Function to refresh a word to a new random word\n */\nconst renderTable = (\n  players: SanakiertoPlayer[],\n  handleRefresh: (player: SanakiertoPlayer, index: number) => void\n) => {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Nimi</TableCell>\n          <TableCell>Sana 1</TableCell>\n          <TableCell>Sana 2</TableCell>\n          <TableCell>Sana 3</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {players.map((player, index) => (\n          <TableRow key={index}>\n            <TableCell>\n              <FastField component={TextField} name={`players.${index}.name`} />\n            </TableCell>\n            {player.words.map((word, index) => (\n              <TableCell key={`${word}${index}`} style={{ minWidth: 190 }}>\n                <span>{word} </span>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => handleRefresh(player, index)}\n                >\n                  <RefreshIcon />\n                </IconButton>\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\n/**\n * Render function for Formik component\n * @param props - Formik form props\n */\nexport const renderForm = (\n  props: FormikProps<Omit<SelectableGame, 'id'>>,\n  classes: Record<string, string>,\n  handleReturn:\n    | ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)\n    | undefined\n) => {\n  /**\n   * Refreshes the word in the given index of the given player with a new, randow word\n   * @param {SanakiertoPlayer} playerToUpdate - the player whose word will be updated\n   * @param {number} wordIndex - the index of the word to refresh\n   */\n  const handleRefresh = (\n    playerToUpdate: SanakiertoPlayer,\n    wordIndex: number\n  ): void => {\n    const newPlayers = props.values.players.map((player) => {\n      if (player.name === playerToUpdate.name) {\n        const newWords = player.words;\n        newWords[wordIndex] = getRandomWord();\n        return { ...player, words: newWords };\n      }\n\n      return player;\n    });\n\n    props.setValues({\n      ...props.values,\n      players: newPlayers,\n    });\n  };\n\n  return (\n    <Form>\n      <div className={classes.gameInfo}>\n        <FormGroup row className={classes.formRow}>\n          <Typography\n            className={classes.marginRight}\n            component=\"label\"\n            variant=\"h6\"\n            htmlFor=\"startTime\"\n          >\n            Alkamisaika:\n          </Typography>\n          <FastField\n            component={KeyboardDateTimePicker}\n            autoOk\n            ampm={false}\n            format=\"d. MMMM HH:mm\"\n            disablePast\n            name=\"startTime\"\n            value={props.values.startTime}\n            onChange={(value: unknown) =>\n              props.setFieldValue('startTime', value)\n            }\n          />\n        </FormGroup>\n        <FormGroup row className={classes.formRow}>\n          <Typography\n            className={classes.marginRight}\n            component=\"label\"\n            variant=\"h6\"\n            htmlFor=\"type\"\n          >\n            Pelin tyyppi:\n          </Typography>\n          <FormControl variant=\"outlined\">\n            <FastField component={Select} name=\"type\" disabled>\n              <MenuItem value={GameType.SANAKIERTO}>Sanakierto</MenuItem>\n            </FastField>\n          </FormControl>\n        </FormGroup>\n      </div>\n      <div className={classes.gameInfo}>\n        <Typography\n          className={classes.marginRight}\n          component=\"label\"\n          variant=\"h6\"\n          htmlFor=\"players\"\n        >\n          Pelaajat:\n        </Typography>\n      </div>\n      <FieldArray\n        name=\"players\"\n        /**\n         * arrayHelpers can be used to implement adding/removing fields,\n         * see https://jaredpalmer.com/formik/docs/api/fieldarray#fieldarray-helpers\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        render={(arrayHelpers) =>\n          renderTable(props.values.players, handleRefresh)\n        }\n      />\n      <div className={classes.buttonRow}>\n        <Fab\n          variant=\"extended\"\n          color=\"primary\"\n          className={classes.marginRight}\n          type=\"submit\"\n        >\n          Luo peli\n        </Fab>\n        <Fab variant=\"extended\" color=\"secondary\" onClick={handleReturn}>\n          Peruuta\n        </Fab>\n      </div>\n    </Form>\n  );\n};\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { Typography, Divider } from '@material-ui/core';\n\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport fiLocale from 'date-fns/locale/fi';\n\nimport { Formik } from 'formik';\n\nimport { useHistory } from 'react-router-dom';\n\nimport { initializePlayers, renderForm } from './formHelpers';\nimport { useDispatch } from 'react-redux';\nimport { addGame } from '../../../reducers/games.reducer';\nimport { GameType, GameStatus } from '../../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formRow: {\n      alignItems: 'center',\n      marginRight: theme.spacing(2),\n    },\n    marginRight: {\n      marginRight: theme.spacing(2),\n    },\n    gameInfo: {\n      display: 'flex',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n    buttonRow: {\n      marginTop: theme.spacing(2),\n    },\n    wordCell: {\n      minWidth: 190,\n    },\n  })\n);\n\nconst NewGame: React.FC = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  // react router\n  const history = useHistory();\n\n  /**\n   * Redirects back to host main page\n   */\n  const handleReturn = (): void => {\n    history.goBack();\n  };\n\n  /** @TODO id hardcored on submit */\n  /** @TODO validate inputs with Yup */\n\n  return (\n    <div>\n      <Typography variant=\"overline\" gutterBottom>\n        Luo uusi peli\n      </Typography>\n      <Divider />\n      <MuiPickersUtilsProvider utils={DateFnsUtils} locale={fiLocale}>\n        <Formik\n          initialValues={{\n            startTime: new Date(),\n            type: GameType.SANAKIERTO,\n            players: initializePlayers(),\n            status: GameStatus.UPCOMING,\n            rounds: 3,\n          }}\n          onSubmit={(values, actions) => {\n            console.log('values', values, 'actions', actions);\n            console.log('adding new game');\n            dispatch(addGame(values));\n            handleReturn();\n          }}\n        >\n          {(props) => renderForm(props, classes, handleReturn)}\n        </Formik>\n      </MuiPickersUtilsProvider>\n    </div>\n  );\n};\n\nexport default NewGame;\n","import {\n  CommonEvent,\n  PlayerEvent,\n  HostEvent,\n  RecievedError,\n  CreateSuccessResponse,\n  ActiveGame,\n  State,\n  JoinSuccessResponse,\n} from '../types';\nimport { log } from '../utils/logger';\nimport store from '../store';\nimport { setJitsiToken, setJitsiRoom } from '../reducers/user.reducer';\nimport { setActiveGame } from '../reducers/games.reducer';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const connect = (\n  socket: SocketIOClient.Socket,\n  token: string,\n  callback: Function\n) => {\n  return () => {\n    socket\n      .emit(CommonEvent.AUTH_REQUEST, { token })\n      .on(CommonEvent.AUTHENTICATED, () => {\n        log('socketio authorized');\n\n        callback(socket);\n      })\n      .on(CommonEvent.UNAUTHORIZED, (error: { message: string }) => {\n        log('socketio unauthorized');\n\n        throw new Error(error.message);\n      });\n  };\n};\n\nexport const playerJoined = (playerId: string) => {\n  log(`recieved ${CommonEvent.PLAYER_JOINED}`);\n\n  const state: State = store.getState();\n\n  const currentGame = state.games.activeGame;\n\n  if (!currentGame) throw new Error('Player joined but no active game is set');\n\n  const newPlayers = currentGame.players.map((player) => {\n    return player.id === playerId ? { ...player, online: true } : player;\n  });\n\n  store.dispatch(\n    setActiveGame({\n      ...currentGame,\n      players: newPlayers,\n    })\n  );\n};\n\nexport const createSuccess = (data: CreateSuccessResponse) => {\n  log(`recieved ${HostEvent.CREATE_SUCCESS}, data:`);\n  log(data);\n\n  store.dispatch(setJitsiRoom(uuidv4()));\n  store.dispatch(setActiveGame(data.game));\n  store.dispatch(setJitsiToken(data.jitsiToken));\n};\n\nexport const createFailure = (data: RecievedError) =>\n  log(`recieved ${HostEvent.CREATE_FAILURE}: ${data.error}`);\n\nexport const startSuccess = (startedGame: ActiveGame) => {\n  log(`recieved ${HostEvent.START_SUCCESS}:`);\n  log(startedGame);\n\n  store.dispatch(setActiveGame(startedGame));\n};\nexport const startFailure = (data: RecievedError) =>\n  log(`recieved ${HostEvent.START_FAILURE}: ${data.error}`);\n\nexport const joinSuccess = (data: JoinSuccessResponse) => {\n  log(`recieved ${PlayerEvent.JOIN_SUCCESS}:`);\n  log(data);\n\n  store.dispatch(setJitsiRoom(data.jitsiRoom));\n  store.dispatch(setActiveGame(data.game));\n};\n\nexport const joinFailure = (data: RecievedError) =>\n  log(`recieved ${PlayerEvent.JOIN_FAILURE}: ${data.error}`);\n\nexport const gameReady = (jitsiRoom: string) => {\n  log(`recieved ${PlayerEvent.GAME_READY}`);\n\n  store.dispatch(setJitsiRoom(jitsiRoom));\n};\nexport const gameStarting = (game: ActiveGame) => {\n  log(`recieved ${PlayerEvent.GAME_STARTING}:`);\n  log(game);\n\n  store.dispatch(setActiveGame(game));\n};\n","import axios from 'axios';\nimport socketIO from 'socket.io-client';\nimport {\n  CommonEvent,\n  HostEvent,\n  PlayerEvent,\n  LoggedUser,\n  EmittedEvent,\n  RecievedError,\n  CreateSuccessResponse,\n  ActiveGame,\n  JoinSuccessResponse,\n} from '../types';\n\nimport * as callbacks from './socketio.callbacks';\nimport * as events from './socketio.events';\n\nexport const attachListeners = (\n  socket: SocketIOClient.Socket,\n  isHost: boolean\n) => {\n  // default listeners\n\n  socket.on(CommonEvent.PLAYER_JOINED, (data: string) =>\n    callbacks.playerJoined(data)\n  );\n\n  if (isHost) {\n    // host listeners\n\n    socket.on(HostEvent.CREATE_SUCCESS, (data: CreateSuccessResponse) =>\n      callbacks.createSuccess(data)\n    );\n    socket.on(HostEvent.CREATE_FAILURE, (data: RecievedError) =>\n      callbacks.createFailure(data)\n    );\n\n    socket.on(HostEvent.START_SUCCESS, (game: ActiveGame) => {\n      callbacks.startSuccess(game);\n    });\n    socket.on(HostEvent.START_FAILURE, (data: RecievedError) =>\n      callbacks.startFailure(data)\n    );\n  } else {\n    // player listeners\n\n    socket.on(PlayerEvent.JOIN_SUCCESS, (data: JoinSuccessResponse) =>\n      callbacks.joinSuccess(data)\n    );\n    socket.on(PlayerEvent.JOIN_FAILURE, (data: RecievedError) =>\n      callbacks.joinFailure(data)\n    );\n\n    socket.on(PlayerEvent.GAME_READY, (jitsiRoom: string) =>\n      callbacks.gameReady(jitsiRoom)\n    );\n    socket.on(PlayerEvent.GAME_STARTING, (game: ActiveGame) =>\n      callbacks.gameStarting(game)\n    );\n  }\n};\n\nexport const emit = (\n  socket: SocketIOClient.Socket,\n  eventObj: EmittedEvent\n): void => {\n  const { event, data } = eventObj;\n\n  console.log(`Emitting ${event}`);\n\n  socket.emit(event, data);\n};\n\nconst getTokenForSocket = async (\n  gameId: string,\n  playerId: string\n): Promise<string> => {\n  const response = await axios.get(`/api/games/${gameId}?pelaaja=${playerId}`);\n  return response.data;\n};\n\nconst authenticateSocket = (\n  socket: SocketIOClient.Socket,\n  token: string,\n  callback: Function\n): SocketIOClient.Socket => {\n  socket.on(CommonEvent.CONNECT, callbacks.connect(socket, token, callback));\n\n  return socket;\n};\n\nconst initHostSocket = (\n  user: LoggedUser,\n  gameId: string\n): SocketIOClient.Socket => {\n  if (!gameId) throw new Error(`Must provide game ID`);\n\n  const callback = (socket: SocketIOClient.Socket) => {\n    attachListeners(socket, true);\n    emit(socket, events.createRoom(gameId));\n  };\n\n  return authenticateSocket(socketIO(), user.token, callback);\n};\n\nconst initPlayerSocket = async (\n  gameId: string,\n  playerId: string | null\n): Promise<SocketIOClient.Socket> => {\n  if (!playerId) throw new Error('Pelaajan id puuttuu');\n\n  const token = await getTokenForSocket(gameId, playerId);\n\n  const callback = (socket: SocketIOClient.Socket) => {\n    attachListeners(socket, false);\n    emit(socket, events.joinGame());\n  };\n\n  return authenticateSocket(socketIO(), token, callback);\n};\n\nexport default {\n  getTokenForSocket,\n  authenticateSocket,\n  initHostSocket,\n  initPlayerSocket,\n};\n","import { HostEvent, EmittedEvent, PlayerEvent, ActiveGame } from '../types';\n\nexport const createRoom = (gameId: string): EmittedEvent => ({\n  event: HostEvent.CREATE_ROOM,\n  data: gameId,\n});\n\nexport const joinGame = (): EmittedEvent => ({\n  event: PlayerEvent.JOIN_GAME,\n  data: null,\n});\n\nexport const jitsiReady = (\n  gameId: string,\n  jitsiRoom: string\n): EmittedEvent => ({\n  event: HostEvent.JITSI_READY,\n  data: { gameId, jitsiRoom },\n});\n\nexport const startGame = (gameId: string): EmittedEvent => ({\n  event: HostEvent.START_GAME,\n  data: gameId,\n});\n\nexport const updateGame = (game: ActiveGame): EmittedEvent => ({\n  event: HostEvent.UPDATE_GAME,\n  data: game,\n});\n","import { emit } from './socketio';\nimport * as events from './socketio.events';\nimport store from '../store';\nimport { ActiveGame } from '../types';\nimport { setActiveGame } from '../reducers/games.reducer';\n\nexport const emitJitsiReady = (\n  socket: SocketIOClient.Socket,\n  gameId: string,\n  jitsiRoom: string\n): void => {\n  emit(socket, events.jitsiReady(gameId, jitsiRoom));\n};\n\nexport const startGame = (\n  socket: SocketIOClient.Socket,\n  gameId: string\n): void => {\n  emit(socket, events.startGame(gameId));\n};\n\nexport const updateGame = (socket: SocketIOClient.Socket, game: ActiveGame) => {\n  store.dispatch(setActiveGame(game));\n  emit(socket, events.updateGame(game));\n};\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  Typography,\n  Table,\n  TableRow,\n  TableCell,\n  Fab,\n  Checkbox,\n  TableBody,\n} from '@material-ui/core';\nimport { SanakiertoPlayer } from '../../../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(2),\n    },\n    noPaddingX: {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    saveBtnContainer: {\n      textAlign: 'center',\n      marginTop: theme.spacing(2),\n    },\n    additionBox: {\n      minWidth: 50,\n    },\n  })\n);\n\ninterface ScoreBoardProps {\n  players: SanakiertoPlayer[];\n  turn: number;\n  handleUpdate: (players: SanakiertoPlayer[]) => void;\n}\n\nconst ScoreBoard: React.FC<ScoreBoardProps> = ({\n  players,\n  turn,\n  handleUpdate,\n}) => {\n  const classes = useStyles();\n  const [checkBoxes, setCheckboxes] = React.useState(\n    new Array(players.length).fill(false)\n  );\n\n  const getPointAddition = (playerIndex: number): number => {\n    const playerCount = players.length;\n    const correctAnswers = checkBoxes.reduce(\n      (sum, next) => (next ? sum + 1 : sum),\n      0\n    );\n\n    switch (correctAnswers) {\n      case playerCount - 1: {\n        return playerIndex === turn ? -50 : 0;\n      }\n      case 0: {\n        return playerIndex === turn ? -50 : 0;\n      }\n      case 1: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 100 : 0;\n      }\n      case 2: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 30 : 0;\n      }\n      case 3: {\n        return checkBoxes[playerIndex] || playerIndex === turn ? 10 : 0;\n      }\n    }\n\n    return correctAnswers;\n  };\n\n  const additionElement = (addition: number) => {\n    const valueString = addition > 0 ? `+${addition}` : `${addition}`;\n    let color = '';\n\n    if (addition > 0) color = 'green';\n    if (addition < 0) color = 'red';\n\n    return <span style={{ color }}>{valueString}</span>;\n  };\n\n  const updateGameState = () => {\n    const newPlayers: SanakiertoPlayer[] = players.map((player, index) => {\n      return {\n        ...player,\n        points: player.points + getPointAddition(index),\n      };\n    });\n\n    setCheckboxes(new Array(players.length).fill(false));\n    handleUpdate(newPlayers);\n  };\n\n  return (\n    <div className={classes.container}>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">Pelaaja</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">Pisteet</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\">+ / -</Typography>\n            </TableCell>\n            <TableCell padding=\"none\" align=\"center\">\n              <Typography variant=\"overline\" noWrap>\n                Vastaus oikein\n              </Typography>\n            </TableCell>\n          </TableRow>\n          {players.map((player, index) => {\n            return (\n              <TableRow key={index}>\n                <TableCell className={classes.noPaddingX} align=\"center\">\n                  {player.name}\n                </TableCell>\n                <TableCell align=\"center\">{player.points}</TableCell>\n                <TableCell\n                  align=\"center\"\n                  className={`${classes.noPaddingX} ${classes.additionBox}`}\n                >\n                  {additionElement(getPointAddition(index))}\n                </TableCell>\n                <TableCell align=\"center\" padding=\"checkbox\">\n                  {index === turn ? (\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Kysyjä\n                    </Typography>\n                  ) : (\n                    <Checkbox\n                      value={checkBoxes[index]}\n                      checked={checkBoxes[index]}\n                      onChange={() => {\n                        const newValues = [...checkBoxes];\n                        newValues[index] = !newValues[index];\n                        setCheckboxes(newValues);\n                      }}\n                    />\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <div className={classes.saveBtnContainer}>\n        <Fab variant=\"extended\" color=\"primary\" onClick={updateGameState}>\n          Päivitä pisteet\n        </Fab>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React from 'react';\n\nconst useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = React.useRef<() => void>();\n\n  // Remember the latest callback\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval\n  React.useEffect(() => {\n    const tick = () => {\n      if (!savedCallback || !savedCallback.current)\n        throw new Error('Problem with interval hook');\n      savedCallback.current();\n    };\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Typography, Fab } from '@material-ui/core';\nimport ScoreBoard from './ScoreBoard';\nimport {\n  SanakiertoActive,\n  SanakiertoPlayer,\n  GameStatus,\n} from '../../../../types';\nimport { useDispatch } from 'react-redux';\nimport { updateGame } from '../../../../reducers/games.reducer';\nimport useInterval from '../../../../hooks/useInterval';\nimport { indexOf } from 'lodash';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: theme.spacing(1),\n    },\n    flex: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n    grow: {\n      flexGrow: 1,\n    },\n  })\n);\n\ninterface HostPanelProps {\n  game: null | SanakiertoActive;\n  handleStart: () => void;\n}\n\nconst HostPanel: React.FC<HostPanelProps> = ({ game, handleStart }) => {\n  const classes = useStyles();\n\n  const [timerRunning, setTimerRunning] = React.useState<boolean>(false);\n  const [timer, setTimer] = React.useState<number>(90);\n\n  const dispatch = useDispatch();\n\n  useInterval(\n    () => {\n      setTimer(timer - 1);\n\n      if (timer === 1) {\n        setTimerRunning(false);\n      }\n    },\n    timerRunning ? 1000 : null\n  );\n\n  if (!game) return <div>Ladataan...</div>;\n\n  if (game.status === GameStatus.WAITING) {\n    return (\n      <div>\n        <div>\n          <Fab variant=\"extended\" onClick={handleStart}>\n            Aloita peli\n          </Fab>\n        </div>\n        <div>\n          {game.players.map((p) => (\n            <div key={p.id}>{`${p.name}${p.online ? ' (online)' : ''}`}</div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const playerWithTurn = game.players.find(\n    (player) => player.id === game.info.turn\n  );\n\n  if (!playerWithTurn)\n    throw new Error('Something went wrong with player turns');\n\n  const handleUpdate = (players: SanakiertoPlayer[]): void => {\n    const currentTurnIndex = game.players.indexOf(playerWithTurn);\n\n    console.log('turn', currentTurnIndex);\n\n    /** const newGameState: SanakiertoActive = {\n      ...game,\n      players,\n      turn,\n      round,\n      status: round > game.rounds ? GameStatus.FINISHED : GameStatus.RUNNING,\n    };\n\n    console.log('updating with', newGameState);\n\n    dispatch(updateGame(newGameState));\n    if (timerRunning) setTimerRunning(false);\n    setTimer(90); */\n  };\n\n  const startTimer = () => {\n    if (timer !== 0) {\n      setTimerRunning(!timerRunning);\n    }\n  };\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h6\">{`Kierros ${game.info.round}`}</Typography>\n      <div className={classes.flex}>\n        <div className={classes.grow}>\n          <Typography\n            variant=\"overline\"\n            component=\"div\"\n            className={classes.grow}\n          >\n            Vuorossa:\n          </Typography>\n          <Typography component=\"div\" gutterBottom>\n            {playerWithTurn.name}\n          </Typography>\n        </div>\n        <div className={classes.grow}>\n          <Typography\n            variant=\"overline\"\n            component=\"div\"\n            className={classes.grow}\n          >\n            Sanat:\n          </Typography>\n          <Typography component=\"div\" gutterBottom>\n            {playerWithTurn.words.join(' / ')}\n          </Typography>\n        </div>\n      </div>\n      <div>\n        <Typography variant=\"overline\" component=\"div\">\n          Vastausaika:\n        </Typography>\n        <div className={classes.flex}>\n          <Typography component=\"div\" className={classes.grow}>\n            {timer !== 0 ? (\n              `${timer} sekuntia`\n            ) : (\n              <Typography color=\"textSecondary\">Aika loppui</Typography>\n            )}\n          </Typography>\n          <div className={classes.grow}>\n            <Fab\n              variant=\"extended\"\n              size=\"small\"\n              color=\"secondary\"\n              onClick={startTimer}\n              disabled={timer === 0}\n            >\n              {timerRunning ? 'Pysäytä' : 'Käynnistä'}\n            </Fab>\n          </div>\n        </div>\n      </div>\n      <ScoreBoard\n        players={game.players}\n        turn={game.players.indexOf(playerWithTurn)}\n        handleUpdate={handleUpdate}\n      />\n    </div>\n  );\n};\n\nexport default HostPanel;\n","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { SanakiertoPlayer } from '../../../../types';\nimport {\n  Typography,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      padding: theme.spacing(2),\n    },\n    header: {\n      marginLeft: theme.spacing(2),\n    },\n  })\n);\n\ninterface ResultsProps {\n  results: SanakiertoPlayer[];\n}\n\nconst Results: React.FC<ResultsProps> = ({ results }) => {\n  const classes = useStyles();\n  let placement = 1;\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h4\" gutterBottom className={classes.header}>\n        PELI PÄÄTTYI\n      </Typography>\n      <Table>\n        <TableBody>\n          {results.map((player, index) => {\n            const row = (\n              <TableRow key={player.name}>\n                <TableCell>{/** placement here? */ player.name}</TableCell>\n                <TableCell>{`${player.points} pistettä`}</TableCell>\n              </TableRow>\n            );\n\n            /** handle shared placements */\n            if (\n              index < results.length - 1 &&\n              results[index + 1].points < player.points\n            ) {\n              placement += 1;\n            }\n\n            return row;\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nexport default Results;\n","import React from 'react';\nimport Jitsi from 'react-jitsi';\n\ninterface JitsiFrameProps {\n  token: string;\n  roomName: string;\n  handleLoaded: () => void;\n  dev?: boolean;\n}\n\nconst JitsiFrame: React.FC<JitsiFrameProps> = ({\n  token,\n  roomName,\n  handleLoaded,\n  dev,\n}) => {\n  React.useEffect(() => {\n    if (dev) {\n      console.log('triggering jitsi api loaded');\n      handleLoaded();\n    }\n  }, []);\n\n  if (dev) {\n    return <div>Jitsi will render here</div>;\n  }\n\n  return (\n    <Jitsi\n      roomName={roomName} // must match room name set in token\n      domain=\"meet.kotipelit.com\"\n      jwt={token} // needs a valid token to auth, see readme\n      onAPILoad={handleLoaded}\n    />\n  );\n};\n\nexport default JitsiFrame;\n","import React from 'react';\n\nimport { log } from '../../../../utils/logger';\nimport * as actions from '../../../../services/socketio.actions';\nimport socketService from '../../../../services/socketio';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\n\nimport HostPanel from './HostPanel';\nimport Results from './Results';\n\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { State, GameStatus, SanakiertoPlayer } from '../../../../types';\n\nimport { useParams, useLocation } from 'react-router-dom';\nimport JitsiFrame from '../../../JitsiFrame';\nimport { setSocket } from '../../../../reducers/user.reducer';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n    },\n    jitsiContainer: {\n      width: '65%',\n      padding: theme.spacing(2),\n      backgroundColor: theme.palette.grey[400],\n    },\n    hostControls: {\n      width: '35%',\n      padding: theme.spacing(2),\n      marginLeft: theme.spacing(1),\n    },\n  })\n);\n\nconst getPlayerIDFromQuery = (location: { search: string }) => {\n  const params = new URLSearchParams(location.search);\n\n  return params.get('pelaaja');\n};\n\n// interface SanakiertoProps {}\n\ninterface ParamTypes {\n  username: string;\n  gameID: string;\n}\n\nconst Sanakierto: React.FC = () => {\n  const classes = useStyles();\n  const activeGame = useSelector((state: State) => state.games.activeGame);\n  const { gameID } = useParams<ParamTypes>();\n  const user = useSelector((state: State) => state.user, shallowEqual);\n  const socket = useSelector((state: State) => state.user.socket);\n  const jitsiRoom = useSelector((state: State) => state.user.jitsiRoom);\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  /** @TODO find out if socket io always uses encrypted connection and manage auth (insecure to send token if not) */\n  React.useEffect(() => {\n    if (!socket) {\n      log('initializing socket');\n\n      if (user.loggedIn) {\n        dispatch(setSocket(socketService.initHostSocket(user, gameID)));\n      } else {\n        socketService\n          .initPlayerSocket(gameID, getPlayerIDFromQuery(location))\n          .then((authedSocket) => dispatch(setSocket(authedSocket)))\n          .catch((error) => console.error(error.message));\n      }\n    }\n  }, []);\n\n  const handleStartGame = (\n    socket: SocketIOClient.Socket,\n    gameId: string\n  ): void => {\n    actions.startGame(socket, gameId);\n  };\n\n  const handleJitsiLoaded = (\n    socket: SocketIOClient.Socket,\n    gameId: string,\n    jitsiRoom: string\n  ): void => {\n    actions.emitJitsiReady(socket, gameId, jitsiRoom);\n  };\n\n  const jitsiContent = () => {\n    return user.loggedIn && user.jitsiToken && jitsiRoom && socket && gameID ? (\n      <JitsiFrame\n        token={user.jitsiToken}\n        roomName={jitsiRoom}\n        handleLoaded={() => handleJitsiLoaded(socket, gameID, jitsiRoom)}\n        dev\n      />\n    ) : (\n      <h4>Loading</h4>\n    );\n  };\n\n  const sortPlayersByPoints = (players: SanakiertoPlayer[]) => {\n    return players.sort((a, b) => b.points - a.points);\n  };\n\n  const sideBar = () => {\n    if (!socket) return <div>Yhdistetään...</div>;\n\n    if (!user.loggedIn) return <div>Player sidebar</div>;\n\n    return activeGame && activeGame.status === GameStatus.FINISHED ? (\n      <Results results={sortPlayersByPoints(activeGame.players)} />\n    ) : (\n      <HostPanel\n        game={activeGame}\n        handleStart={() => handleStartGame(socket, gameID)}\n      />\n    );\n  };\n\n  return (\n    <div className={classes.container}>\n      <Paper elevation={5} className={classes.jitsiContainer}>\n        {jitsiContent()}\n      </Paper>\n      <Paper elevation={5} className={classes.hostControls}>\n        {sideBar()}\n      </Paper>\n    </div>\n  );\n};\n\nexport default Sanakierto;\n","import React from 'react';\n\nimport { capitalize } from 'lodash';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  Button,\n  Typography,\n  Paper,\n  IconButton,\n  Menu,\n  MenuItem,\n} from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { SelectableGame, Sanakierto, SanakiertoPlayer } from '../../../types';\nimport { useDispatch } from 'react-redux';\nimport { deleteGame, launchGame } from '../../../reducers/games.reducer';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(1),\n      padding: theme.spacing(2),\n    },\n    infoBar: {\n      alignItems: 'center',\n    },\n    flex: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n    editButton: {\n      marginLeft: theme.spacing(1),\n    },\n    playerRow: {},\n    inviteText: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\n/** @TODO invitetext function */\n\nconst getInviteUrl = (\n  gameId: string,\n  hostPath: string,\n  playerId: string | undefined\n): string =>\n  `https://www.kotipelit.com${hostPath}/${gameId}?pelaaja=${playerId}`;\n\nconst getInviteText = (\n  game: Sanakierto,\n  hostPath: string,\n  player?: SanakiertoPlayer\n): string =>\n  `Tervetuloa pelaamaan ${capitalize(game.type)}a!\n  \nSanasi ovat: ${player ? player.words.join(' ') : '<Pelaajan sanat>'}\n      \nTehtävänäsi on miettiä sanoille niitä kuvaavat vihjeet.\n      \nPeli alkaa ${new Date(game.startTime).toUTCString()}\n      \nNähdään peleillä osoitteessa:\n${player ? getInviteUrl(game.id, hostPath, player?.id) : '<Pelaajan linkki>'}`;\n\ninterface QueuedGameProps {\n  game: SelectableGame;\n}\n\nconst QueuedGame: React.FC<QueuedGameProps> = ({ game }) => {\n  const classes = useStyles();\n  const currentPath = useLocation().pathname;\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [inviteText, setInviteText] = React.useState(\n    getInviteText(game, currentPath)\n  );\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (): void => setAnchorEl(null);\n\n  const handleStart = (): void => {\n    dispatch(launchGame(game.id));\n    history.push(`${currentPath}/${game.id}`);\n  };\n\n  const handleRemove = (): void => {\n    const agree = window.confirm('Poistetaanko peli?');\n\n    if (agree) dispatch(deleteGame(game.id));\n  };\n\n  const handleCopy = (\n    game: SelectableGame,\n    hostPath: string,\n    player: SanakiertoPlayer\n  ): void => {\n    console.log('TODO: copy to clipboard?');\n\n    setInviteText(getInviteText(game, hostPath, player));\n  };\n\n  return (\n    <Paper elevation={2} className={classes.container}>\n      <div className={`${classes.infoBar} ${classes.flex}`}>\n        <div>\n          <Typography>{new Date(game.startTime).toUTCString()}</Typography>\n        </div>\n        <div>\n          <Typography>{capitalize(game.type)}</Typography>\n        </div>\n        <div>\n          <Typography>{`${game.players.length} pelaajaa`}</Typography>\n        </div>\n\n        <div>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleStart}>\n            Käynnistä\n          </Button>\n          <IconButton\n            size=\"small\"\n            className={classes.editButton}\n            onClick={handleOpen}\n          >\n            <MoreVertIcon />\n          </IconButton>\n          <Menu\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n            getContentAnchorEl={null}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <MenuItem>\n              <Typography>Muokkaa</Typography>\n            </MenuItem>\n            <MenuItem onClick={handleRemove}>\n              <Typography color=\"secondary\">Poista</Typography>\n            </MenuItem>\n          </Menu>\n        </div>\n      </div>\n      <div>\n        <Typography variant=\"h6\" gutterBottom>\n          Pelaajat\n        </Typography>\n        {game.players.map((player) => (\n          <div\n            key={player.id}\n            className={`${classes.flex} ${classes.playerRow}`}\n          >\n            <Typography component=\"div\">{player.name}</Typography>\n            <Typography component=\"div\">{player.words.join(' / ')}</Typography>\n            <div>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => handleCopy(game, currentPath, player)}\n              >\n                Näytä kutsuteksti\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className={classes.inviteText}>\n        <Typography variant=\"h6\" gutterBottom>\n          Kutsuteksti\n        </Typography>\n        <Typography style={{ whiteSpace: 'pre' }}>{inviteText}</Typography>\n      </div>\n    </Paper>\n  );\n};\n\nexport default QueuedGame;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Fab, Typography } from '@material-ui/core';\n\nimport QueuedGame from './QueuedGame';\n\nimport { State, LoggedUser } from '../../../types';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    marginTop: { marginTop: theme.spacing(2) },\n  })\n);\n\ninterface DashboardProps {\n  user: LoggedUser;\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ user }) => {\n  const classes = useStyles();\n\n  const games = useSelector((state: State) => state.games.allGames);\n\n  return (\n    <div>\n      <div>\n        <Typography variant=\"overline\">Tulevat pelit:</Typography>\n      </div>\n      <div>\n        {games && games.map((game) => <QueuedGame key={game.id} game={game} />)}\n      </div>\n      <div className={classes.marginTop}>\n        <Fab\n          color=\"primary\"\n          variant=\"extended\"\n          component={Link}\n          to={`/${user.username}/newgame`}\n        >\n          LUO PELI\n        </Fab>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\n\nimport { Paper, Typography, Divider } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport NewGame from './host/NewGame';\nimport Sanakierto from './host/sanakierto/SanaKierto';\nimport Dashboard from './host/Dashboard';\nimport { useSelector } from 'react-redux';\nimport { State, LoggedUser, User } from '../../types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    marginBottom: {\n      marginBottom: theme.spacing(2),\n    },\n    container: {\n      padding: theme.spacing(3),\n    },\n  })\n);\n\ninterface ChannelPageProps {\n  labelText: string;\n}\n\nconst checkLogIn = (userToValidate: User): LoggedUser | null => {\n  if (userToValidate && userToValidate.loggedIn) return userToValidate;\n\n  return null;\n};\n\n/** @TODO guestview */\nconst ChannelPage: React.FC<ChannelPageProps> = ({ labelText }) => {\n  const classes = useStyles();\n\n  const user = useSelector((state: State) => state.user);\n\n  const loggedInUser = checkLogIn(user);\n\n  return (\n    <Router>\n      <Paper elevation={5} className={classes.container}>\n        <Typography variant=\"h3\" gutterBottom>\n          {labelText}\n        </Typography>\n        <Divider className={classes.marginBottom} />\n        <Switch>\n          <Route path=\"/:username/newgame\">\n            {loggedInUser ? <NewGame /> : null}\n          </Route>\n          <Route path=\"/:username/:gameID\">\n            <Sanakierto />\n          </Route>\n          <Route path=\"/\">\n            {loggedInUser ? <Dashboard user={loggedInUser} /> : null}\n          </Route>\n        </Switch>\n      </Paper>\n    </Router>\n  );\n};\n\nexport default ChannelPage;\n","import React from 'react';\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport {\n  Container,\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n} from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { initGames } from './reducers/games.reducer';\nimport { checkForUser } from './reducers/user.reducer';\nimport { initChannels } from './reducers/channels.reducer';\n\nimport FrontPage from './components/FrontPage';\nimport TempFrontPage from './components/TempFrontPage';\nimport UserControls from './components/UserControls';\n\nimport ChannelPage from './components/channel/ChannelPage';\nimport { State, HostChannel } from './types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    navbar: {\n      marginBottom: theme.spacing(3),\n    },\n    toolbar: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n  })\n);\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const user = useSelector((state: State) => state.user, shallowEqual);\n  const channels = useSelector(\n    (state: State) => state.channels.allChannels,\n    shallowEqual\n  );\n\n  // init channels and check local storage for user\n  React.useEffect(() => {\n    dispatch(checkForUser());\n    dispatch(initChannels());\n  }, [dispatch]);\n\n  // init games\n  React.useEffect(() => {\n    dispatch(initGames());\n  }, [dispatch]);\n\n  const channelRoutes = (channels: HostChannel[]) => {\n    return channels.map((channel) => (\n      <Route key={channel.username} path={`/${channel.username}`}>\n        <ChannelPage labelText={channel.channelName} />\n      </Route>\n    ));\n  };\n\n  return (\n    <Router>\n      <AppBar position=\"static\" className={classes.navbar}>\n        <Toolbar className={classes.toolbar}>\n          <Button color=\"inherit\" component={Link} to=\"/\">\n            <Typography variant=\"h6\">Kotipelit.com</Typography>\n          </Button>\n          <UserControls user={user} />\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Switch>\n          {channelRoutes(channels)}\n          <Route path=\"/\">\n            <TempFrontPage />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","export const log = (msg: unknown): void => {\n  // eslint-disable-next-line no-undef\n  if (process && process.env && process.env.NODE_ENV === 'development')\n    console.log(msg);\n};\n"],"sourceRoot":""}